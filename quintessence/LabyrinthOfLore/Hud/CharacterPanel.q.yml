properties:


  - name: player_inventory
    type: AllegroFlare::Inventory*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: thing_dictionary
    type: LabyrinthOfLore::Entity::ThingDictionary*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: cursor_x
    type: int
    init_with: 0
    getter: true

  - name: cursor_y
    type: int
    init_with: 0
    getter: true


functions:


  - name: move_cursor_up
    type: bool
    body: |
      cursor_y--;
      if (cursor_y < 0)
      {
         int inventory_list_length = get_inventory_rollup().size();
         cursor_y = inventory_list_length - 1;
      }
      return true;


  - name: move_cursor_down
    type: bool
    body: |
      cursor_y++;
      int inventory_list_length = get_inventory_rollup().size();
      if (cursor_y >= inventory_list_length)
      {
         cursor_y = 0;
      }
      return true;


  - name: calculate_count_of_type
    type: int
    parameters:
      - name: thing_type
        type: thing_type_t
        default_argument: THING_TYPE_UNDEFINED
    body: |
      if (!player_inventory) throw std::runtime_error("cannot calculate_count_of_type on a nullptr player_inventory");
      int count = 0;
      std::vector<int> &player_inventory_items = player_inventory->get_items_ref();

      for (unsigned i=0; i<player_inventory_items.size(); i++)
      {
         if (thing_dictionary->find_definition(player_inventory_items[i]).get_type() == thing_type) count++;
      }
      return count;


  - name: get_inventory_rollup
    type: std::map<thing_type_t, int>
    body: |
      if (!player_inventory) throw std::runtime_error("cannot calculate_count_of_type on a nullptr player_inventory");
      if (!thing_dictionary) throw std::runtime_error("cannot calculate_count_of_type on a nullptr thing_dictionary");

            //item //count
      std::map<thing_type_t, int> result = {};

      for (auto &inventory_item_id : player_inventory->get_items_ref())
      {
         thing_type_t inventory_item_type = thing_dictionary->find_definition_ref(inventory_item_id).get_type();
         result[inventory_item_type] = calculate_count_of_type(inventory_item_type);
      }

      return result;


  - name: calculate_attack_strength
    type: int
    body: |
      // 1 for now
      return 1;


  - name: calculate_total_carry_strength
    type: int
    body: |
      // 10 for now
      return 10;


  - name: calculate_current_carry_weight
    type: int
    body: |
      if (!thing_dictionary) throw std::runtime_error("Cannot calculate_total_carry_strength with a nullptr thing_dictionary");
      if (!player_inventory) throw std::runtime_error("Cannot calculate_total_carry_strength with a nullptr player_inventory");

      int result = 0;

      std::vector<int> &inventory_items = player_inventory->get_items_ref();
      for (unsigned i=0; i<inventory_items.size(); i++)
      {
         int item_weight = thing_dictionary->find_definition(inventory_items[i]).get_weight();
         result += item_weight;
      }

      return result;
    body_dependency_symbols:
      - std::vector


  - name: calculate_available_remaining_carry_weight
    type: int
    body: |
      return calculate_total_carry_strength() - calculate_current_carry_weight();


  - name: has_item
    parameters:
      - name: item_id
        type: int
        default_argument: 0
    type: bool
    body: |
      if (player_inventory && player_inventory->has_item(item_id)) return true;
      return false;


dependencies:


  - symbol: AllegroFlare::Inventory
    headers: [ AllegroFlare/Inventory.hpp ]
  - symbol: LabyrinthOfLore::Entity::ThingDictionary
    headers: [ LabyrinthOfLore/Entity/ThingDictionary.hpp ]
  - symbol: std::vector
    headers: [ vector ]
  - symbol: std::vector<int>
    headers: [ vector ]
  - symbol: thing_type_t
    headers: [ LabyrinthOfLoreGame/ItemIdEnums.hpp ]
  - symbol: std::map<thing_type_t, int>
    headers: [ map ]



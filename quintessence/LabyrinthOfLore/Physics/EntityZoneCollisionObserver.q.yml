properties:
  - name: entities
    type: std::vector<LabyrinthOfLore::Entity::Base*>
    init_with: "{}"
    constructor_arg: true
  - name: zones
    type: std::vector<LabyrinthOfLore::WorldMap::Zone*>
    init_with: "{}"
    constructor_arg: true
  - name: collisions_at_start
    type: std::vector<std::pair<LabyrinthOfLore::Entity::Base*, LabyrinthOfLore::WorldMap::Zone*>>
    init_with: "{}"
    constructor_arg: false
functions:
  - name: get_collided
    type: std::vector<std::pair<LabyrinthOfLore::Entity::Base*, LabyrinthOfLore::WorldMap::Zone*>>
    body: |
      std::vector<std::pair<LabyrinthOfLore::Entity::Base*, LabyrinthOfLore::WorldMap::Zone*>> result;

      for (auto &entity : entities)
      {
         for (auto &zone : zones)
         {
            if (zone->collides(entity->get_placement_ref().position)) result.push_back({ entity, zone });
         }
      }

      return result;
  - name: observe_start
    type: void
    parameters:
    - name: entities
      type: std::vector<LabyrinthOfLore::Entity::Base*>
      default_argument: "{}"
    - name: zones
      type: std::vector<LabyrinthOfLore::WorldMap::Zone*>
      default_argument: "{}"
    body: |
      return;
dependencies:
  - symbol: std::vector<LabyrinthOfLore::Entity::Base*>
    headers: [ vector, LabyrinthOfLore/Entity/Base.hpp ]
  - symbol: std::vector<LabyrinthOfLore::WorldMap::Zone*>
    headers: [ vector, LabyrinthOfLore/WorldMap/Zone.hpp ]
  - symbol: std::vector<std::pair<LabyrinthOfLore::Entity::Base*, LabyrinthOfLore::WorldMap::Zone*>>
    headers: [ vector, utility, LabyrinthOfLore/Entity/Base.hpp, LabyrinthOfLore/WorldMap/Zone.hpp ]

properties:
  - name: collisions_at_start
    type: std::vector<std::pair<LabyrinthOfLore::Entity::Base*, LabyrinthOfLore::WorldMap::Zone*>>
    init_with: "{}"
    constructor_arg: false
    getter: true
  - name: collisions_at_end
    type: std::vector<std::pair<LabyrinthOfLore::Entity::Base*, LabyrinthOfLore::WorldMap::Zone*>>
    init_with: "{}"
    constructor_arg: false
    getter: true
functions:
  - name: get_collided
    parameters:
    - name: entities
      type: std::vector<LabyrinthOfLore::Entity::Base*>
      default_argument: "{}"
    - name: zones
      type: std::vector<LabyrinthOfLore::WorldMap::Zone*>
      default_argument: "{}"
    type: std::vector<std::pair<LabyrinthOfLore::Entity::Base*, LabyrinthOfLore::WorldMap::Zone*>>
    body: |
      std::vector<std::pair<LabyrinthOfLore::Entity::Base*, LabyrinthOfLore::WorldMap::Zone*>> result;

      for (auto &entity : entities)
      {
         for (auto &zone : zones)
         {
            if (zone->collides(entity->get_placement_ref().position)) result.push_back({ entity, zone });
         }
      }

      return result;
  - name: observe_start_state
    type: void
    parameters:
    - name: entities
      type: std::vector<LabyrinthOfLore::Entity::Base*>
      default_argument: "{}"
    - name: zones
      type: std::vector<LabyrinthOfLore::WorldMap::Zone*>
      default_argument: "{}"
    body: |
      collisions_at_start = get_collided(entities, zones);
      return;
  - name: observe_end_state
    type: void
    parameters:
    - name: entities
      type: std::vector<LabyrinthOfLore::Entity::Base*>
      default_argument: "{}"
    - name: zones
      type: std::vector<LabyrinthOfLore::WorldMap::Zone*>
      default_argument: "{}"
    body: |
      collisions_at_end = get_collided(entities, zones);
      return;
  - name: collisions_added
    type: std::vector<std::pair<LabyrinthOfLore::Entity::Base*, LabyrinthOfLore::WorldMap::Zone*>>
    body: |
       std::vector<std::pair<LabyrinthOfLore::Entity::Base*, LabyrinthOfLore::WorldMap::Zone*>> diff;

       std::set_difference(
         collisions_at_end.begin(), collisions_at_end.end(),
         collisions_at_start.begin(), collisions_at_start.end(),
         std::inserter(diff, diff.begin())
       );

       return diff;
    body_dependency_symbols:
      - std::set_difference
  - name: collisions_removed
    type: std::vector<std::pair<LabyrinthOfLore::Entity::Base*, LabyrinthOfLore::WorldMap::Zone*>>
    body: |
       std::vector<std::pair<LabyrinthOfLore::Entity::Base*, LabyrinthOfLore::WorldMap::Zone*>> diff;

       std::set_difference(
         collisions_at_start.begin(), collisions_at_start.end(),
         collisions_at_end.begin(), collisions_at_end.end(),
         std::inserter(diff, diff.begin())
       );

       return diff;
    body_dependency_symbols:
      - std::set_difference
dependencies:
  - symbol: LabyrinthOfLore::WorldMap::Zone
    headers: [ LabyrinthOfLore/WorldMap/Zone.hpp ]
  - symbol: LabyrinthOfLore::Entity::Base
    headers: [ LabyrinthOfLore/Entity/Base.hpp ]
  - symbol: std::set_difference
    headers: [ algorithm ]

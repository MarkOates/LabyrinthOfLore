properties:
  - name: definitions
    type: std::map<int, LabyrinthOfLore::Entity::ThingDefinition>
    init_with: "{}"
    constructor_arg: true
    getter_ref: true
functions:
  - name: size
    type: int
    body: return definitions.size();
  - name: create_new_definition
    type: int
    parameters:
      - name: thing
        type: LabyrinthOfLore::Entity::ThingDefinition
        default_argument: "{}"
    body: |
      int largest_thing_id = std::max((int)CREATED_THINGS_START, definitions.rbegin()->first);
      int new_thing_id = largest_thing_id + 1;
      definitions[new_thing_id] = thing;
      return new_thing_id;
    body_dependency_symbols:
      - std::max
  - name: find_definition
    type: LabyrinthOfLore::Entity::ThingDefinition
    parameters:
      - name: tile_type
        type: int
        default_argument: 0
    body: |
      if (definitions.find(tile_type) == definitions.end()) return LabyrinthOfLore::Entity::ThingDefinition();
      return definitions[tile_type];
  - name: find_definition_ref
    type: LabyrinthOfLore::Entity::ThingDefinition&
    parameters:
      - name: tile_type
        type: int
        default_argument: 0
    body: |
      if (definitions.find(tile_type) == definitions.end()) throw std::runtime_error("cannot find_definition_ref in the ThingDictionary. It doesn't exist.");
      return definitions[tile_type];
dependencies:
  - symbol: LabyrinthOfLore::Entity::ThingDefinition
    headers: [ LabyrinthOfLore/Entity/ThingDefinition.hpp ]
  - symbol: LabyrinthOfLore::Entity::ThingDefinition&
    headers: [ LabyrinthOfLore/Entity/ThingDefinition.hpp ]
  - symbol: std::map<int, LabyrinthOfLore::Entity::ThingDefinition>
    headers: [ map, LabyrinthOfLore/Entity/ThingDefinition.hpp ]
  - symbol: std::max
    headers: [ algorithm ]

properties:
  - name: position
    type: AllegroFlare::vec3d
    init_with: "{}"
    getter_ref: true
    constructor_arg: true
  - name: yaw
    type: float
    init_with: "0.0f"
    getter_ref: true
    constructor_arg: true
  - name: pitch
    type: float
    init_with: "0.0f"
    getter_ref: true
    constructor_arg: true
functions:
  - name: build_custom_reverse_transform
    type: void
    parameters:
      - name: placement
        type: allegro_flare::placement3d*
        default_argument: nullptr
      - name: transform
        type: ALLEGRO_TRANSFORM*
        default_argument: nullptr
    body: |
      al_identity_transform(transform);

      // translate
      al_translate_transform_3d(transform, -placement->position.x, -placement->position.y, -placement->position.z);

      // rotate
      al_rotate_transform_3d(transform, 0, -1, 0, placement->rotation.y * AllegroFlare::TAU);
      al_rotate_transform_3d(transform, -1, 0, 0, placement->rotation.x * AllegroFlare::TAU);
      // al_rotate_transform_3d(transform, 0, 0, -1, placement->rotation.z * AllegroFlare::TAU);

      // offset for alignment and anchors
      //al_translate_transform_3d(transform, -placement->anchor.x, -placement->anchor.y, -placement->anchor.z);
      //al_scale_transform_3d(transform, 1.0/placement->scale.x, 1.0/placement->scale.y, 1.0/placement->scale.z);
      //al_translate_transform_3d(transform, placement->align.x*placement->size.x, placement->align.y*placement->size.y, placement->align.z*placement->size.z);
    body_dependency_symbols:
      - AllegroFlare::TAU
  - name: set_perspective_transform
    type: void
    private: true
    parameters:
      - name: surface
        type: ALLEGRO_BITMAP*
        default_argument: nullptr
      - name: transform
        type: ALLEGRO_TRANSFORM*
        default_argument: nullptr
    body: |
      float aspect_ratio = (float)al_get_bitmap_height(surface) / al_get_bitmap_width(surface);
      float multiplier = 0.01; // lower numbers (0.3), while not changing the "far" are a zoom in
      al_perspective_transform(transform,
        -1 * multiplier,
        aspect_ratio * multiplier, 1 * multiplier,
        multiplier,
        -aspect_ratio * multiplier, 300);
  - name: start_projection
    type: void
    parameters:
      - name: surface
        type: ALLEGRO_BITMAP*
        default_argument: nullptr
    body: |
      if (!surface) throw std::runtime_error("[Camera::start_projection] error: cannot set the projection on nullptr surface");

      al_set_render_state(ALLEGRO_DEPTH_TEST, 1);
      al_set_render_state(ALLEGRO_WRITE_MASK, ALLEGRO_MASK_DEPTH | ALLEGRO_MASK_RGBA);
      al_clear_depth_buffer(1);

      ALLEGRO_TRANSFORM transform;
      allegro_flare::placement3d camera_view(AllegroFlare::vec3d(position.x, position.z, position.y));
      //camera_view.rotation = AllegroFlare::vec3d(yaw, 0, 0);
      camera_view.rotation = AllegroFlare::vec3d(pitch, -yaw, 0);
      build_custom_reverse_transform(&camera_view, &transform);

      set_perspective_transform(surface, &transform);

      al_use_projection_transform(&transform);

      return;
    body_dependency_symbols:
      - ALLEGRO_TRANSFORM
      - allegro_flare::placement3d
dependencies:
  - symbol: AllegroFlare::vec3d
    headers: [ AllegroFlare/Vec3D.hpp ]
  - symbol: allegro_flare::placement3d
    headers: [ allegro_flare/placement3d.h ]
  - symbol: allegro_flare::placement3d*
    headers: [ allegro_flare/placement3d.h ]
  - symbol: ALLEGRO_TRANSFORM
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_TRANSFORM*
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_BITMAP*
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::TAU
    headers: [ AllegroFlare/Useful.hpp ]
  - symbol: tan
    headers: [ cmath ]

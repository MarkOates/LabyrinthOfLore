properties:
  - name: position
    type: AllegroFlare::vec3d
    init_with: "{}"
    constructor_arg: true
  - name: yaw
    type: float
    init_with: "0.0f"
    constructor_arg: true
functions:
  - name: start_projection
    type: void
    parameters:
      - name: surface
        type: ALLEGRO_BITMAP*
        default_argument: nullptr
    body: |
      if (!surface) throw std::runtime_error("[Camera::start_projection] error: cannot set the projection on nullptr surface");

      al_set_render_state(ALLEGRO_DEPTH_TEST, 1);
      al_set_render_state(ALLEGRO_WRITE_MASK, ALLEGRO_MASK_DEPTH | ALLEGRO_MASK_RGBA);
      al_clear_depth_buffer(1);

      ALLEGRO_TRANSFORM transform;
      allegro_flare::placement3d camera_view(AllegroFlare::vec3d(position.x, position.z, position.y));
      //camera_view.rotation = AllegroFlare::vec3d(yaw, 0, 0);
      camera_view.rotation = AllegroFlare::vec3d(0, -yaw, 0);
      camera_view.build_reverse_transform(&transform);

      float aspect_ratio = (float)al_get_bitmap_height(surface) / al_get_bitmap_width(surface);
      al_perspective_transform(&transform, -1, aspect_ratio, 1, 1, -aspect_ratio, 100);
      al_use_projection_transform(&transform);

      return;
    body_dependency_symbols:
      - ALLEGRO_TRANSFORM
      - allegro_flare::placement3d
dependencies:
  - symbol: AllegroFlare::vec3d
    headers: [ AllegroFlare/Vec3D.hpp ]
  - symbol: allegro_flare::placement3d
    headers: [ allegro_flare/placement3d.h ]
  - symbol: ALLEGRO_TRANSFORM
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_BITMAP*
    headers: [ allegro5/allegro.h ]

properties:
  - name: camera_view
    type: allegro_flare::placement3d
    init_with: "{}"
    constructor_arg: true
  - name: rendering_surface
    type: ALLEGRO_BITMAP*
    init_with: nullptr
    constructor_arg: true
  - name: entities
    type: std::vector<LabyrinthOfLore::Entity::Base*>
    init_with: "{}"
    constructor_arg: true
  - name: camera
    type: LabyrinthOfLore::Rendering::Camera*
    init_with: nullptr
    constructor_arg: true
functions:
  - name: set_projection
    type: void
    parameters:
      - name: bitmap
        type: ALLEGRO_BITMAP*
        default_argument: nullptr
      - name: t
        type: ALLEGRO_TRANSFORM*
        default_argument: nullptr
    body: |
       float aspect_ratio = (float)al_get_bitmap_height(bitmap) / al_get_bitmap_width(bitmap);
       al_perspective_transform(t, -1, aspect_ratio, 1, 1, -aspect_ratio, 100);
       al_use_projection_transform(t);
  - name: dot_product_sorter
    type: bool
    static: true
    parameters:
      - name: a
        type: LabyrinthOfLore::Entity::Base*
        default_argument: nullptr
      - name: b
        type: LabyrinthOfLore::Entity::Base*
        default_argument: nullptr
    body: |
      return true;
      //return a->get_placement_ref().position * b->get_placement_ref().position;
  - name: select_non_billboarded_sprites
    type: std::vector<LabyrinthOfLore::Entity::Base*>
    body: |
      std::vector<LabyrinthOfLore::Entity::Base*> billboarded_sprites = {};
      for (auto &entity : entities)
      {
         if (!entity->get_billboard_at_camera()) billboarded_sprites.push_back(entity);
      }
      return entities;
  - name: select_sorted_billboard_sprites
    type: std::vector<LabyrinthOfLore::Entity::Base*>
    body: |
      std::vector<LabyrinthOfLore::Entity::Base*> billboarded_sprites = {};
      for (auto &entity : entities)
      {
         if (entity->get_billboard_at_camera()) billboarded_sprites.push_back(entity);
      }
      std::sort(billboarded_sprites.begin(), billboarded_sprites.end(), dot_product_sorter);
      return entities;
    body_dependency_symbols:
      - std::sort
  - name: prep_render
    type: void
    body: |
       // setup the render settings
       al_set_render_state(ALLEGRO_DEPTH_TEST, 1);
       al_set_render_state(ALLEGRO_WRITE_MASK, ALLEGRO_MASK_DEPTH | ALLEGRO_MASK_RGBA);
       al_clear_depth_buffer(1);

       ALLEGRO_TRANSFORM t;
       camera_view.build_reverse_transform(&t);
       set_projection(rendering_surface, &t);
  - name: render
    type: void
    body: |
      al_set_target_bitmap(rendering_surface);
      al_clear_to_color(al_color_name("maroon"));

      if (camera) camera->start_projection(rendering_surface);
      else prep_render();

      LabyrinthOfLore::Rendering::SpritesBillboarder billboarder(camera_view, entities);
      billboarder.process();

       al_set_render_state(ALLEGRO_DEPTH_TEST, 0);
      for (auto &entity : select_sorted_billboard_sprites())
      {
         LabyrinthOfLore::Rendering::EntityRenderer(entity).render();
      }
      al_set_render_state(ALLEGRO_DEPTH_TEST, 1);
      for (auto &entity : select_non_billboarded_sprites())
      {
         LabyrinthOfLore::Rendering::EntityRenderer(entity).render();
      }

      return;
    body_dependency_symbols:
      - LabyrinthOfLore::Rendering::SpritesBillboarder
      - LabyrinthOfLore::Rendering::EntityRenderer
      - al_clear_to_color
      - al_color_name
      - al_draw_bitmap
dependencies:
  - symbol: LabyrinthOfLore::Rendering::Camera*
    headers: [ LabyrinthOfLore/Rendering/Camera.hpp ]
  - symbol: LabyrinthOfLore::Entity::Base*
    headers: [ LabyrinthOfLore/Entity/Base.hpp ]
  - symbol: std::vector<LabyrinthOfLore::Entity::Base*>
    headers: [ vector, LabyrinthOfLore/Entity/Base.hpp ]
  - symbol: LabyrinthOfLore::Rendering::SpritesBillboarder
    headers: [ LabyrinthOfLore/Rendering/SpritesBillboarder.hpp ]
  - symbol: LabyrinthOfLore::Rendering::EntityRenderer
    headers: [ LabyrinthOfLore/Rendering/EntityRenderer.hpp ]
  - symbol: allegro_flare::placement3d
    headers: [ allegro_flare/placement3d.h ]
  - symbol: ALLEGRO_BITMAP*
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_TRANSFORM*
    headers: [ allegro5/allegro.h ]
  - symbol: al_color_name
    headers: [ allegro5/allegro_color.h ]
  - symbol: al_clear_to_color
    headers: [ allegro5/allegro.h ]
  - symbol: al_draw_bitmap
    headers: [ allegro5/allegro.h ]
  - symbol: std::sort
    headers: [ algorithm ]

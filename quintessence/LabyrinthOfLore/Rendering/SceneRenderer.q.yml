properties:
  - name: rendering_surface
    type: ALLEGRO_BITMAP*
    init_with: nullptr
    constructor_arg: true
  - name: camera
    type: LabyrinthOfLore::Rendering::Camera*
    init_with: nullptr
    constructor_arg: true
  - name: entities
    type: std::vector<LabyrinthOfLore::Entity::Base*>
    init_with: "{}"
    constructor_arg: true
functions:
  - name: render
    type: void
    body: |
      if (!rendering_surface || !camera) throw std::runtime_error("cannot render with null rendering_surface and/or camera");

      ALLEGRO_STATE previous_render_state;
      al_store_state(&previous_render_state, ALLEGRO_STATE_TARGET_BITMAP);
      al_set_target_bitmap(rendering_surface);

      al_clear_to_color(al_color_name("maroon"));

      camera->start_projection(rendering_surface);

      for (auto &entity : entities)
      {
         LabyrinthOfLore::Rendering::EntityRenderer(entity).render();
      }

      al_restore_state(&previous_render_state);
      return;
    body_dependency_symbols:
      - LabyrinthOfLore::Rendering::EntityRenderer
      - al_clear_to_color
      - al_color_name
      - al_draw_bitmap
dependencies:
  - symbol: LabyrinthOfLore::Rendering::Camera*
    headers: [ LabyrinthOfLore/Rendering/Camera.hpp ]
  - symbol: LabyrinthOfLore::Entity::Base*
    headers: [ LabyrinthOfLore/Entity/Base.hpp ]
  - symbol: std::vector<LabyrinthOfLore::Entity::Base*>
    headers: [ vector, LabyrinthOfLore/Entity/Base.hpp ]
  - symbol: LabyrinthOfLore::Rendering::EntityRenderer
    headers: [ LabyrinthOfLore/Rendering/EntityRenderer.hpp ]
  - symbol: allegro_flare::placement3d
    headers: [ allegro_flare/placement3d.h ]
  - symbol: ALLEGRO_BITMAP*
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_TRANSFORM*
    headers: [ allegro5/allegro.h ]
  - symbol: al_color_name
    headers: [ allegro5/allegro_color.h ]
  - symbol: al_clear_to_color
    headers: [ allegro5/allegro.h ]
  - symbol: al_draw_bitmap
    headers: [ allegro5/allegro.h ]
  - symbol: std::sort
    headers: [ algorithm ]

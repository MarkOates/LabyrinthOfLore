properties:
  - name: picking_buffer
    type: AllegroFlare::PickingBuffer*
    init_with: "nullptr"
    constructor_arg: true
  - name: camera
    type: LabyrinthOfLore::Rendering::Camera*
    init_with: nullptr
    constructor_arg: true
  - name: tile_map_mesh
    type: LabyrinthOfLore::Rendering::TileMapMesh
    init_with: "{}"
    constructor_arg: true
  - name: entities
    type: std::vector<LabyrinthOfLore::Entity::Base*>
    init_with: "{}"
    constructor_arg: true
  - name: clamped_color_shader
    type: LabyrinthOfLore::Shader::ClampedColor*
    init_with: nullptr
    constructor_arg: true
functions:
  - name: render
    type: void
    body: |
      if (!picking_buffer) throw std::runtime_error("picking buffer must not be a nullptr");
      if (!camera) throw std::runtime_error("PickingBuffer camera must not be a nullptr");
      if (!clamped_color_shader) throw std::runtime_error("clamped_color_shader must not be a nullptr");

      ALLEGRO_STATE previous_render_state;
      al_store_state(&previous_render_state, ALLEGRO_STATE_TARGET_BITMAP);
      al_set_target_bitmap(picking_buffer->get_surface_render());

      al_clear_to_color(al_map_rgba_f(0, 0, 0, 0));

      camera->start_projection(picking_buffer->get_surface_render());

      //tile_map_mesh.draw();

      clamped_color_shader->activate();

      for (auto &entity : entities)
      {
         LabyrinthOfLore::Rendering::EntityPickingRenderer(entity, clamped_color_shader).render();
      }

      clamped_color_shader->deactivate();

      al_restore_state(&previous_render_state);
      return;
    body_dependency_symbols:
      - LabyrinthOfLore::Rendering::EntityPickingRenderer
dependencies:
  - symbol: LabyrinthOfLore::Rendering::Camera
    headers: [ LabyrinthOfLore/Rendering/Camera.hpp ]
  - symbol: allegro_flare::placement3d
    headers: [ allegro_flare/placement3d.h ]
  - symbol: LabyrinthOfLore::Shader::ClampedColor
    headers: [ LabyrinthOfLore/Shader/ClampedColor.hpp ]
  - symbol: LabyrinthOfLore::Rendering::EntityPickingRenderer
    headers: [ LabyrinthOfLore/Rendering/EntityPickingRenderer.hpp ]
  - symbol: LabyrinthOfLore::Entity::Base
    headers: [ LabyrinthOfLore/Entity/Base.hpp ]
  - symbol: AllegroFlare::PickingBuffer
    headers: [ AllegroFlare/PickingBuffer.hpp ]
  - symbol: ALLEGRO_TRANSFORM
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_BITMAP
    headers: [ allegro5/allegro.h ]
  - symbol: LabyrinthOfLore::Rendering::TileMapMesh
    headers: [ LabyrinthOfLore/Rendering/TileMapMesh.hpp ]

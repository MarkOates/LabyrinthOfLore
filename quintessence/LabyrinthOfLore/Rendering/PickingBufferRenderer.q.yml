properties:
  - name: picking_buffer
    type: AllegroFlare::PickingBuffer*
    init_with: "nullptr"
    constructor_arg: true
  - name: camera_view
    type: allegro_flare::placement3d
    init_with: "{}"
    constructor_arg: true
  - name: entities
    type: std::vector<LabyrinthOfLore::Entity::Base*>
    init_with: "{}"
    constructor_arg: true
functions:
  - name: set_projection
    type: void
    private: true
    parameters:
      - name: bitmap
        type: ALLEGRO_BITMAP*
        default_argument: nullptr
      - name: t
        type: ALLEGRO_TRANSFORM*
        default_argument: nullptr
    body: |
       float aspect_ratio = (float)al_get_bitmap_height(bitmap) / al_get_bitmap_width(bitmap);
       al_perspective_transform(t, -1, aspect_ratio, 1, 1, -aspect_ratio, 100);
       al_use_projection_transform(t);
  - name: prep_render
    type: void
    private: true
    body: |
       // setup the render settings
       al_set_render_state(ALLEGRO_DEPTH_TEST, 1);
       al_set_render_state(ALLEGRO_WRITE_MASK, ALLEGRO_MASK_DEPTH | ALLEGRO_MASK_RGBA);
       al_clear_depth_buffer(1);

       ALLEGRO_TRANSFORM t;
       camera_view.build_reverse_transform(&t);
       set_projection(picking_buffer->get_surface_render(), &t);
  - name: render
    type: void
    body: |
      if (!picking_buffer) throw std::runtime_error("picking buffer must not be a nullptr");
      ALLEGRO_STATE previous_render_state;
      al_store_state(&previous_render_state, ALLEGRO_STATE_TARGET_BITMAP);
      al_set_target_bitmap(picking_buffer->get_surface_render());
      prep_render();


      LabyrinthOfLore::Rendering::SpritesBillboarder billboarder(camera_view, entities);
      billboarder.process();

      for (auto &entity : entities)
      {
         LabyrinthOfLore::Rendering::EntityPickingRenderer(entity).render();
      }

      al_restore_state(&previous_render_state);
      return;
    body_dependency_symbols:
      - LabyrinthOfLore::Rendering::EntityPickingRenderer
      - LabyrinthOfLore::Rendering::SpritesBillboarder
dependencies:
  - symbol: allegro_flare::placement3d
    headers: [ allegro_flare/placement3d.h ]
  - symbol: LabyrinthOfLore::Rendering::EntityPickingRenderer
    headers: [ LabyrinthOfLore/Rendering/EntityPickingRenderer.hpp ]
  - symbol: LabyrinthOfLore::Rendering::SpritesBillboarder
    headers: [ LabyrinthOfLore/Rendering/SpritesBillboarder.hpp ]
  - symbol: std::vector<LabyrinthOfLore::Entity::Base*>
    headers: [ vector, LabyrinthOfLore/Entity/Base.hpp ]
  - symbol: AllegroFlare::PickingBuffer*
    headers: [ AllegroFlare/PickingBuffer.hpp ]
  - symbol: ALLEGRO_TRANSFORM*
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_BITMAP*
    headers: [ allegro5/allegro.h ]

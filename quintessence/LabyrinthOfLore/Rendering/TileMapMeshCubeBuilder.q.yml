functions:
  - name: random_color
    type: ALLEGRO_COLOR
    body: |
      static AllegroFlare::Random random;
      static std::vector<ALLEGRO_COLOR> colors = {
         al_color_name("white"),
         //al_color_name("orange"),
         //al_color_name("dimgray"),
         //al_color_name("darkslategray"),
         //al_color_name("firebrick"),
         //al_color_name("darkolivegreen"),
      };
      return colors[random.get_random_int(0, colors.size()-1)];
    body_dependency_symbols:
      - AllegroFlare::Random
  - name: build_cube
    type: std::vector<ALLEGRO_VERTEX>
    parameters:
      - name: x
        type: float
        default_argument: 0
      - name: y
        type: float
        default_argument: 0
      - name: height
        type: float
        default_argument: 1
    body: |
      ALLEGRO_COLOR cube_color = random_color();
      int u = 0;
      int v = 1; //texture ? al_get_bitmap_width(texture) : 1;

      float mul = -1;

      std::vector<ALLEGRO_VERTEX> result = {
        // facing from the top down:

        // top
        AllegroFlare::build_vertex(mul*x, y, height, cube_color, 0, 0), // top left triangle
        AllegroFlare::build_vertex(mul*x+1, y, height, cube_color, v, 0),
        AllegroFlare::build_vertex(mul*x, y+1, height, cube_color, 0, v),

        AllegroFlare::build_vertex(mul*x+1, y, height, cube_color, v, 0), // bottom right triangle
        AllegroFlare::build_vertex(mul*x, y+1, height, cube_color, 0, v),
        AllegroFlare::build_vertex(mul*x+1, y+1, height, cube_color, v, v),

        // left
        AllegroFlare::build_vertex(mul*x, y, height, cube_color, 0, 0), // top left triangle
        AllegroFlare::build_vertex(mul*x, y+1, height, cube_color, v, 0),
        AllegroFlare::build_vertex(mul*x, y, 0, cube_color, 0, v),

        AllegroFlare::build_vertex(mul*x, y+1, height, cube_color, v, 0), // bottom right triangle
        AllegroFlare::build_vertex(mul*x, y, 0, cube_color, 0, v),
        AllegroFlare::build_vertex(mul*x, y+1, 0, cube_color, v, v),

        // right
        //AllegroFlare::build_vertex(mul*x+1, y+1, height, cube_color, 0, 0), // top left triangle
        //AllegroFlare::build_vertex(mul*x+1, y, height, cube_color, v, 0),
        //AllegroFlare::build_vertex(mul*x+1, y+1, 0, cube_color, 0, v),

        //AllegroFlare::build_vertex(mul*x+1, y, height, cube_color, v, 0), // bottom right triangle
        //AllegroFlare::build_vertex(mul*x+1, y+1, 0, cube_color, 0, v),
        //AllegroFlare::build_vertex(mul*x+1, y, 0, cube_color, v, v),

        // right
        //AllegroFlare::build_vertex(mul*x+1, y+1, height, cube_color, 0, 0), // top left triangle
        //AllegroFlare::build_vertex(mul*x+1, y, height, cube_color, v, 0),
        //AllegroFlare::build_vertex(mul*x+1, y+1, 0, cube_color, 0, v),

        //AllegroFlare::build_vertex(mul*x+1, y, height, cube_color, v, 0), // bottom right triangle
        //AllegroFlare::build_vertex(mul*x+1, y+1, 0, cube_color, 0, v),
        //AllegroFlare::build_vertex(mul*x+1, y, 0, cube_color, v, v),

        // bottom
        //AllegroFlare::build_vertex(mul*x, y+1, height, cube_color, 0, 0), // top left triangle
        //AllegroFlare::build_vertex(mul*x+1, y+1, height, cube_color, v, 0),
        //AllegroFlare::build_vertex(mul*x, y+1, 0, cube_color, 0, v),

        //AllegroFlare::build_vertex(mul*x+1, y+1, height, cube_color, v, 0), // bottom right triangle
        //AllegroFlare::build_vertex(mul*x, y+1, 0, cube_color, 0, v),
        //AllegroFlare::build_vertex(mul*x+1, y+1, 0, cube_color, v, v),

        //
      };

      for (auto &vertex : result)
      {
         //vertex.x = -vertex.x;
      }

      return result;
    body_dependency_symbols:
      - AllegroFlare::build_vertex
      - al_color_name
dependencies:
  - symbol: std::vector<ALLEGRO_VERTEX>
    headers: [ vector, allegro5/allegro.h, allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::Random
    headers: [ AllegroFlare/Random.hpp ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::build_vertex
    headers: [ AllegroFlare/Useful.hpp ]
  - symbol: al_color_name
    headers: [ allegro5/allegro_color.h ]

properties:
  - name: x
    type: int
    init_with: 0
    constructor_arg: true
  - name: y
    type: int
    init_with: 0
    constructor_arg: true
  - name: height
    type: float
    init_with: 1.0f
    constructor_arg: true
  - name: mul
    type: float
    init_with: -1.0f
    constructor_arg: true
functions:
  - name: buildA
    type: ALLEGRO_VERTEX
    parameters:
      - name: u
        type: float
        default_argument: 0.0f
      - name: v
        type: float
        default_argument: 0.0f
    body: return AllegroFlare::build_vertex(mul*x, y, height, al_color_name("white"), u, v);
  - name: buildB
    type: ALLEGRO_VERTEX
    parameters:
      - name: u
        type: float
        default_argument: 0.0f
      - name: v
        type: float
        default_argument: 0.0f
    body: return AllegroFlare::build_vertex(mul*x+1, y, height, al_color_name("white"), u, v);
  - name: buildC
    type: ALLEGRO_VERTEX
    parameters:
      - name: u
        type: float
        default_argument: 0.0f
      - name: v
        type: float
        default_argument: 0.0f
    body: return AllegroFlare::build_vertex(mul*x, (y+1), height, al_color_name("white"), u, v);
  - name: buildD
    type: ALLEGRO_VERTEX
    parameters:
      - name: u
        type: float
        default_argument: 0.0f
      - name: v
        type: float
        default_argument: 0.0f
    body: return AllegroFlare::build_vertex(mul*x+1, (y+1), height, al_color_name("white"), u, v);
  - name: buildE
    type: ALLEGRO_VERTEX
    parameters:
      - name: u
        type: float
        default_argument: 0.0f
      - name: v
        type: float
        default_argument: 0.0f
    body: return AllegroFlare::build_vertex(mul*x, (y+1), 0, al_color_name("white"), u, v);
  - name: buildF
    type: ALLEGRO_VERTEX
    parameters:
      - name: u
        type: float
        default_argument: 0.0f
      - name: v
        type: float
        default_argument: 0.0f
    body: return AllegroFlare::build_vertex(mul*x+1, (y+1), 0, al_color_name("white"), u, v);
  - name: buildG
    type: ALLEGRO_VERTEX
    parameters:
      - name: u
        type: float
        default_argument: 0.0f
      - name: v
        type: float
        default_argument: 0.0f
    body: return AllegroFlare::build_vertex(mul*x, y, 0, al_color_name("white"), u, v);
  - name: buildH
    type: ALLEGRO_VERTEX
    parameters:
      - name: u
        type: float
        default_argument: 0.0f
      - name: v
        type: float
        default_argument: 0.0f
    body: return AllegroFlare::build_vertex(mul*x+1, y, 0, al_color_name("white"), u, v);
  - name: random_color
    type: ALLEGRO_COLOR
    body: |
      static AllegroFlare::Random random;
      static std::vector<ALLEGRO_COLOR> colors = {
         al_color_name("white"),
         //al_color_name("orange"),
         //al_color_name("dimgray"),
         //al_color_name("darkslategray"),
         //al_color_name("firebrick"),
         //al_color_name("darkolivegreen"),
      };
      return colors[random.get_random_int(0, colors.size()-1)];
    body_dependency_symbols:
      - AllegroFlare::Random
  - name: build_cube
    type: std::vector<ALLEGRO_VERTEX>
    body: |
      ALLEGRO_COLOR cube_color = random_color();
      int u = 0;
      int v = 0; //texture ? al_get_bitmap_width(texture) : 1;
      int tile_width = 48;

      //float mul = -1;

      int top_u = u;
      int top_v = v;
      int front_and_back_u = u;
      int front_and_back_v = v;
      int right_and_left_u = u;
      int right_and_left_v = v;

      // this is the official ordering:
      // top
      // front
      // right
      // left
      // back

      std::vector<ALLEGRO_VERTEX> result = {
        // top:
        buildA(top_u, top_v),
        buildB(top_u+1, top_v),
        buildC(top_u, top_v+1),
        buildB(top_u+1, top_v),
        buildC(top_u, top_v+1),
        buildD(top_u+1, top_v+1),

        // front:
        buildC(front_and_back_u, front_and_back_v),
        buildD(front_and_back_u+1, front_and_back_v),
        buildE(front_and_back_u, front_and_back_v+1),
        buildD(front_and_back_u+1, front_and_back_v),
        buildE(front_and_back_u, front_and_back_v+1),
        buildF(front_and_back_u+1, front_and_back_v+1),

        // right:
        buildD(right_and_left_u, right_and_left_v),
        buildB(right_and_left_u+1, right_and_left_v),
        buildF(right_and_left_u, right_and_left_v+1),
        buildB(right_and_left_u+1, right_and_left_v),
        buildF(right_and_left_u, right_and_left_v+1),
        buildH(right_and_left_u+1, right_and_left_v+1),

        // left:
        buildA(right_and_left_u, right_and_left_v),
        buildC(right_and_left_u+1, right_and_left_v),
        buildG(right_and_left_u, right_and_left_v+1),
        buildC(right_and_left_u+1, right_and_left_v),
        buildG(right_and_left_u, right_and_left_v+1),
        buildE(right_and_left_u+1, right_and_left_v+1),

        // back:
        buildB(front_and_back_u+1, front_and_back_v),
        buildA(front_and_back_u+1, front_and_back_v),
        buildH(front_and_back_u, front_and_back_v+1),
        buildA(front_and_back_u+1, front_and_back_v),
        buildH(front_and_back_u, front_and_back_v+1),
        buildG(front_and_back_u+1, front_and_back_v+1),
      };

      for (auto &vertex : result)
      {
         //vertex.x = -vertex.x;
      }

      return result;
    body_dependency_symbols:
      - AllegroFlare::build_vertex
      - al_color_name
dependencies:
  - symbol: std::vector<ALLEGRO_VERTEX>
    headers: [ vector, allegro5/allegro.h, allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::Random
    headers: [ AllegroFlare/Random.hpp ]
  - symbol: Tileo::TileAtlas*
    headers: [ Tileo/TileAtlas.hpp ]
  - symbol: ALLEGRO_VERTEX
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::build_vertex
    headers: [ AllegroFlare/Useful.hpp ]
  - symbol: al_color_name
    headers: [ allegro5/allegro_color.h ]

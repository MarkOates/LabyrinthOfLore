properties:
  - name: tile_map
    type: LabyrinthOfLore::WorldMap::TileMap
    init_with: "{}"
    constructor_arg: true
  - name: vertexes
    type: std::vector<ALLEGRO_VERTEX>
    init_with: "{}"
functions:
  - name: build_cube
    type: std::vector<ALLEGRO_VERTEX>
    parameters:
      - name: x
        type: float
        default_argument: 0
      - name: y
        type: float
        default_argument: 0
      - name: height
        type: float
        default_argument: 1
    body: |
      return {
        // top
        AllegroFlare::build_vertex(x, y, height, al_color_name("orange"), 0, 0), // top left triangle
        AllegroFlare::build_vertex(x+1, y, height, al_color_name("orange"), 1, 0),
        AllegroFlare::build_vertex(x, y+1, height, al_color_name("orange"), 0, 1),

        AllegroFlare::build_vertex(x+1, y, height, al_color_name("orange"), 1, 0), // bottom right triangle
        AllegroFlare::build_vertex(x, y+1, height, al_color_name("orange"), 0, 1),
        AllegroFlare::build_vertex(x+1, y+1, height, al_color_name("orange"), 1, 1),
        //k
      };
    body_dependency_symbols:
      - AllegroFlare::build_vertex
      - al_color_name
  - name: build
    type: bool
    body: |
      vertexes.clear();

      for (unsigned y=0; y<tile_map.get_height(); y++)
      {
         for (unsigned x=0; x<tile_map.get_height(); x++)
         {
            LabyrinthOfLore::WorldMap::Tile tile = tile_map.get_tile(x, y);
            std::vector<ALLEGRO_VERTEX> cube = build_cube(x, y, tile.get_height());
  
            vertexes.insert(vertexes.end(), cube.begin(), cube.end());
         }
      }

      return true;
  - name: draw
    type: void
    body: |
      al_draw_prim(&vertexes[0], nullptr, nullptr, 0, vertexes.size(), ALLEGRO_PRIM_TRIANGLE_LIST);
dependencies:
  - symbol: LabyrinthOfLore::WorldMap::TileMap
    headers: [ LabyrinthOfLore/WorldMap/TileMap.hpp ]
  - symbol: std::vector<ALLEGRO_VERTEX>
    headers: [ vector, allegro5/allegro.h ]
  - symbol: ALLEGRO_VERTEX
    headers: [ allegro5/allegro.h ]
  - symbol: al_color_name
    headers: [ allegro5/allegro_color.h ]
  - symbol: AllegroFlare::build_vertex
    headers: [ AllegroFlare/Useful.hpp ]

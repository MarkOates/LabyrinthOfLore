properties:
  - name: tile_map
    type: LabyrinthOfLore::WorldMap::TileMap
    init_with: "{}"
    constructor_arg: true
  - name: texture
    type: ALLEGRO_BITMAP*
    init_with: nullptr
    constructor_arg: true
  - name: vertexes
    type: std::vector<ALLEGRO_VERTEX>
    init_with: "{}"
functions:
  - name: random_color
    type: ALLEGRO_COLOR
    body: |
      static AllegroFlare::Random random;
      static std::vector<ALLEGRO_COLOR> colors = {
         al_color_name("white"),
         //al_color_name("orange"),
         //al_color_name("dimgray"),
         //al_color_name("darkslategray"),
         //al_color_name("firebrick"),
         //al_color_name("darkolivegreen"),
      };
      return colors[random.get_random_int(0, colors.size()-1)];
    body_dependency_symbols:
      - AllegroFlare::Random
  - name: build_cube
    type: std::vector<ALLEGRO_VERTEX>
    parameters:
      - name: x
        type: float
        default_argument: 0
      - name: y
        type: float
        default_argument: 0
      - name: height
        type: float
        default_argument: 1
    body: |
      ALLEGRO_COLOR cube_color = random_color();
      int u = 0;
      int v = texture ? al_get_bitmap_width(texture) : 1;

      return {
        // facing from the top down:

        // top
        AllegroFlare::build_vertex(-x, y, height, cube_color, 0, 0), // top left triangle
        AllegroFlare::build_vertex(-x+1, y, height, cube_color, v, 0),
        AllegroFlare::build_vertex(-x, y+1, height, cube_color, 0, v),

        AllegroFlare::build_vertex(-x+1, y, height, cube_color, v, 0), // bottom right triangle
        AllegroFlare::build_vertex(-x, y+1, height, cube_color, 0, v),
        AllegroFlare::build_vertex(-x+1, y+1, height, cube_color, v, v),

        // right
        //AllegroFlare::build_vertex(-x, y, height, cube_color, 0, 0), // top left triangle
        //AllegroFlare::build_vertex(-x, y+1, height, cube_color, v, 0),
        //AllegroFlare::build_vertex(-x, y, 0, cube_color, 0, v),

        //AllegroFlare::build_vertex(-x, y+1, height, cube_color, v, 0), // bottom right triangle
        //AllegroFlare::build_vertex(-x, y, 0, cube_color, 0, v),
        //AllegroFlare::build_vertex(-x, y+1, 0, cube_color, v, v),

        // bottom
        //AllegroFlare::build_vertex(-x, y+1, height, cube_color, 0, 0), // top left triangle
        //AllegroFlare::build_vertex(-x+1, y+1, height, cube_color, v, 0),
        //AllegroFlare::build_vertex(-x, y+1, 0, cube_color, 0, v),

        //AllegroFlare::build_vertex(-x+1, y+1, height, cube_color, v, 0), // bottom right triangle
        //AllegroFlare::build_vertex(-x, y+1, 0, cube_color, 0, v),
        //AllegroFlare::build_vertex(-x+1, y+1, 0, cube_color, v, v),

        //
      };
    body_dependency_symbols:
      - AllegroFlare::build_vertex
      - al_color_name
  - name: build
    type: bool
    body: |
      vertexes.clear();

      for (unsigned y=0; y<tile_map.get_height(); y++)
      {
         for (unsigned x=0; x<tile_map.get_width(); x++)
         {
            LabyrinthOfLore::WorldMap::Tile tile = tile_map.get_tile(x, y);
            std::vector<ALLEGRO_VERTEX> cube = build_cube(x, y, tile.get_height());
  
            vertexes.insert(vertexes.end(), cube.begin(), cube.end());
         }
      }

      return true;
  - name: draw
    type: void
    body: |
      ALLEGRO_STATE previous_transform_state;
      al_store_state(&previous_transform_state, ALLEGRO_STATE_TRANSFORM);

      ALLEGRO_TRANSFORM transform;
      al_identity_transform(&transform);
      al_rotate_transform_3d(&transform, 1, 0, 0, -ALLEGRO_PI/2);
      al_rotate_transform_3d(&transform, 0, 1, 0, -ALLEGRO_PI/2);
      al_rotate_transform_3d(&transform, 0, 1, 0, -ALLEGRO_PI/2);
      //al_rotate_transform_3d(&transform, 0, 0, 1, -ALLEGRO_PI/2);
      //al_scale_transform_3d(&transform, 1.0, 1.0, 1.0);
      al_translate_transform_3d(&transform, 1.0, 0, 0);

      al_use_transform(&transform);

      al_draw_prim(&vertexes[0], nullptr, texture, 0, vertexes.size(), ALLEGRO_PRIM_TRIANGLE_LIST);

      al_restore_state(&previous_transform_state);
dependencies:
  - symbol: LabyrinthOfLore::WorldMap::TileMap
    headers: [ LabyrinthOfLore/WorldMap/TileMap.hpp ]
  - symbol: std::vector<ALLEGRO_VERTEX>
    headers: [ vector, allegro5/allegro.h ]
  - symbol: AllegroFlare::Random
    headers: [ AllegroFlare/Random.hpp ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_BITMAP*
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_VERTEX
    headers: [ allegro5/allegro.h ]
  - symbol: al_color_name
    headers: [ allegro5/allegro_color.h ]
  - symbol: AllegroFlare::build_vertex
    headers: [ AllegroFlare/Useful.hpp ]

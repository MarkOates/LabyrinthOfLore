properties:
  - name: tile_atlas
    type: Tileo::TileAtlas*
    init_with: nullptr
    constructor_arg: true
  - name: tile_type_dictionary
    type: LabyrinthOfLore::Rendering::TileTypeDictionary
    init_with: "{}"
    constructor_arg: true
  - name: tile_map
    type: LabyrinthOfLore::WorldMap::TileMap
    init_with: "{}"
    constructor_arg: true
  - name: texture
    type: ALLEGRO_BITMAP*
    init_with: nullptr
    constructor_arg: true
  - name: vertexes
    type: std::vector<ALLEGRO_VERTEX>
    init_with: "{}"
    getter: true
functions:
  - name: build
    type: bool
    body: |
      if (!tile_atlas) throw std::runtime_error("cannot apply_textures with a nullptr tile_atlas");

      vertexes.clear();
      ALLEGRO_BITMAP *texture = tile_atlas->get_bitmap();

      for (int y=0; y<tile_map.get_height(); y++)
      {
         for (int x=0; x<tile_map.get_width(); x++)
         {
            LabyrinthOfLore::WorldMap::Tile tile = tile_map.get_tile(x, y);
            int tile_type = tile.get_type();

            LabyrinthOfLore::Rendering::TileTypeDefinition tile_type_definition = tile_type_dictionary.find_definition(tile_type);

            if (tile.get_type() == 0)
            {
               // don't create a tile
            }
            else
            {
               bool do_not_include_front_face = false;
               bool do_not_include_right_face = false;
               bool do_not_include_left_face = false;
               bool do_not_include_back_face = false;

               std::vector<ALLEGRO_VERTEX> pillar = {};
               LabyrinthOfLore::Rendering::TileMapMeshPillarBuilder builder(x, y, tile.get_height());
               pillar = builder.build_pillar();
               pillar = LabyrinthOfLore::Rendering::TileMapMeshPillarTexturer(
                     tile_atlas,
                     pillar,
                     tile_type_definition.get_tile_index_for_front_and_back_texture(),
                     tile_type_definition.get_tile_index_for_right_and_left_texture(),
                     tile_type_definition.get_tile_index_for_top_texture(),
                     builder.needs_partial_height_side_faces_from_top(),
                     builder.get_height()
                  ).build_textured_pillar();

               vertexes.insert(vertexes.end(), pillar.begin(), pillar.end());
            }
         }
      }

      std::cout << "TileMapMesh has been built.  The mesh contains " << vertexes.size() << " vertexes.";

      return true;
    body_dependency_symbols:
      - std::cout
      - LabyrinthOfLore::Rendering::TileMapMeshPillarBuilder
      - LabyrinthOfLore::Rendering::TileMapMeshPillarTexturer
  - name: draw
    type: void
    body: |
      ALLEGRO_BITMAP *texture = nullptr;
      if (tile_atlas) texture = tile_atlas->get_bitmap();

      //ALLEGRO_STATE previous_transform_state;
      //al_store_state(&previous_transform_state, ALLEGRO_STATE_TRANSFORM);

      //ALLEGRO_TRANSFORM transform;
      //al_identity_transform(&transform);
      //al_rotate_transform_3d(&transform, 1, 0, 0, -ALLEGRO_PI/2);
      //al_rotate_transform_3d(&transform, 0, 1, 0, -ALLEGRO_PI/2);
      //al_rotate_transform_3d(&transform, 0, 1, 0, -ALLEGRO_PI/2);
      ////al_rotate_transform_3d(&transform, 0, 0, 1, -ALLEGRO_PI/2);
      ////al_scale_transform_3d(&transform, 1.0, 1.0, 1.0);
      //al_translate_transform_3d(&transform, 1.0, 0, 0);

      //al_use_transform(&transform);

      al_draw_prim(&vertexes[0], nullptr, texture, 0, vertexes.size(), ALLEGRO_PRIM_TRIANGLE_LIST);

      //al_restore_state(&previous_transform_state);
dependencies:
  - symbol: LabyrinthOfLore::Rendering::TileMapMeshPillarBuilder
    headers: [ LabyrinthOfLore/Rendering/TileMapMeshPillarBuilder.hpp ]
  - symbol: LabyrinthOfLore::Rendering::TileMapMeshPillarTexturer
    headers: [ LabyrinthOfLore/Rendering/TileMapMeshPillarTexturer.hpp ]
  - symbol: LabyrinthOfLore::Rendering::TileTypeDictionary
    headers: [ LabyrinthOfLore/Rendering/TileTypeDictionary.hpp ]
  - symbol: LabyrinthOfLore::WorldMap::TileMap
    headers: [ LabyrinthOfLore/WorldMap/TileMap.hpp ]
  - symbol: std::vector<ALLEGRO_VERTEX>
    headers: [ vector, allegro5/allegro.h ]
  - symbol: AllegroFlare::Random
    headers: [ AllegroFlare/Random.hpp ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_BITMAP*
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_VERTEX
    headers: [ allegro5/allegro.h ]
  - symbol: al_color_name
    headers: [ allegro5/allegro_color.h ]
  - symbol: AllegroFlare::build_vertex
    headers: [ AllegroFlare/Useful.hpp ]
  - symbol: std::cout
    headers: [ iostream ]
  - symbol: Tileo::TileAtlas*
    headers: [ Tileo/TileAtlas.hpp ]

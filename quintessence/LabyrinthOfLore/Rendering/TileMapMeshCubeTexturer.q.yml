properties:
  - name: tile_atlas
    type: Tileo::TileAtlas*
    init_with: nullptr
    constructor_arg: true
  - name: cube_vertexes
    type: std::vector<ALLEGRO_VERTEX>
    init_with: "{}"
    constructor_arg: true
  #- name: tile_index_for_front_and_back_texture
    #type: int
    #init_with: 0
    #constructor_arg: true
  #- name: tile_index_for_right_and_left_texture
    #type: int
    #init_with: 0
    #constructor_arg: true
  #- name: tile_index_for_top_texture
    #type: int
    #init_with: 0
    #constructor_arg: true
functions:
  - name: texture_cube
    type: std::vector<ALLEGRO_VERTEX>
    body: |
      if (!tile_atlas) throw std::runtime_error("cannot texture_cube with a nullptr tile_atlas");
      if (cube_vertexes.size()!=30)
      {
         std::stringstream error_message;
         error_message << "cannot texture_cube with cube_vertexes that does not have the expected 30 vertexes. ";
         error_message << "The passed cube_vertexes has " << cube_vertexes.size() << " vertexes.";
         throw std::runtime_error(error_message.str());
      }

      //float front_and_back_u1 = 0;
      //float front_and_back_v1 = 0;
      //float front_and_back_u2 = 0;
      //float front_and_back_v2 = 0;

      //float right_and_left_u1 = 0;
      //float right_and_left_v1 = 0;
      //float right_and_left_u2 = 0;
      //float right_and_left_v2 = 0;

      //float top_u1 = 0;
      //float top_v1 = 0;
      //float top_u2 = 0;
      //float top_v2 = 0;

      //tile_atlas->get_tile_uv(tile_index_for_top_texture, &top_u1, &top_v1, &top_u2, &top_v2);

      //float front_and_back_u1 = u;
      //float front_and_back_v1 = v;
      //float front_and_back_u2 = u;
      //float front_and_back_v2 = v;

      //float right_and_left_u1 = u;
      //float right_and_left_v1 = v;
      //float right_and_left_u2 = u;
      //float right_and_left_v2 = v;

      //float top_u1 = 0;
      //float top_v1 = 0;
      //float top_u2 = 0;
      //float top_v2 = 0;

      //tile_atlas->get_tile_uv(tile_index_for_front_and_back_texture, &front_and_back_u1, &front_and_back_v1, &front_and_back_u2, &front_and_back_v2);
      //tile_atlas->get_tile_uv(tile_index_for_right_and_left_texture, &right_and_left_u_u1, &right_and_left_u_v1, &right_and_left_u_u2, &right_and_left_u_v2);
      //tile_atlas->get_tile_uv(tile_index_for_top_texture, &top_u1, &top_v1, &top_u2, &top_v2);


      return cube_vertexes;
    body_dependency_symbols:
      - std::stringstream
dependencies:
  - symbol: Tileo::TileAtlas*
    headers: [ Tileo/TileAtlas.hpp ]
  - symbol: std::vector<ALLEGRO_VERTEX>
    headers: [ vector, allegro5/allegro_primitives.h ]
  - symbol: std::stringstream
    headers: [ sstream ]

properties:
  - name: x
    type: int
    init_with: 0
    constructor_arg: true
  - name: y
    type: int
    init_with: 0
    constructor_arg: true
  - name: height
    type: float
    init_with: 1.0f
    constructor_arg: true
    getter: true
  - name: remove_left_face
    type: bool
    init_with: false
    constructor_arg: false
functions:
  - name: buildA
    type: ALLEGRO_VERTEX
    body: return AllegroFlare::build_vertex(x, y, height, al_color_name("white"), 0, 0);
  - name: buildB
    type: ALLEGRO_VERTEX
    body: return AllegroFlare::build_vertex(x+1, y, height, al_color_name("white"), 0, 0);
  - name: buildC
    type: ALLEGRO_VERTEX
    body: return AllegroFlare::build_vertex(x, (y+1), height, al_color_name("white"), 0, 0);
  - name: buildD
    type: ALLEGRO_VERTEX
    body: return AllegroFlare::build_vertex(x+1, (y+1), height, al_color_name("green"), 0, 0);
  - name: buildE
    type: ALLEGRO_VERTEX
    body: return AllegroFlare::build_vertex(x, (y+1), (int)height, al_color_name("dodgerblue"), 0, 0);
  - name: buildF
    type: ALLEGRO_VERTEX
    body: return AllegroFlare::build_vertex(x+1, (y+1), (int)height, al_color_name("white"), 0, 0);
  - name: buildG
    type: ALLEGRO_VERTEX
    body: return AllegroFlare::build_vertex(x, y, (int)height, al_color_name("red"), 0, 0);
  - name: buildH
    type: ALLEGRO_VERTEX
    body: return AllegroFlare::build_vertex(x+1, y, (int)height, al_color_name("white"), 0, 0);
  - name: buildA_whole
    type: ALLEGRO_VERTEX
    parameters:
      - name: height_origin
        type: float
        default_argument: 0.0f
    body: return AllegroFlare::build_vertex(x, y, height_origin+1, al_color_name("white"), 0, 0);
  - name: buildB_whole
    type: ALLEGRO_VERTEX
    parameters:
      - name: height_origin
        type: float
        default_argument: 0.0f
    body: return AllegroFlare::build_vertex(x+1, y, height_origin+1, al_color_name("white"), 0, 0);
  - name: buildC_whole
    type: ALLEGRO_VERTEX
    parameters:
      - name: height_origin
        type: float
        default_argument: 0.0f
    body: return AllegroFlare::build_vertex(x, (y+1), height_origin+1, al_color_name("white"), 0, 0);
  - name: buildD_whole
    type: ALLEGRO_VERTEX
    parameters:
      - name: height_origin
        type: float
        default_argument: 0.0f
    body: return AllegroFlare::build_vertex(x+1, (y+1), height_origin+1, al_color_name("green"), 0, 0);
  - name: buildE_whole
    type: ALLEGRO_VERTEX
    parameters:
      - name: height_origin
        type: float
        default_argument: 0.0f
    body: return AllegroFlare::build_vertex(x, (y+1), height_origin, al_color_name("dodgerblue"), 0, 0);
  - name: buildF_whole
    type: ALLEGRO_VERTEX
    parameters:
      - name: height_origin
        type: float
        default_argument: 0.0f
    body: return AllegroFlare::build_vertex(x+1, (y+1), height_origin, al_color_name("white"), 0, 0);
  - name: buildG_whole
    type: ALLEGRO_VERTEX
    parameters:
      - name: height_origin
        type: float
        default_argument: 0.0f
    body: return AllegroFlare::build_vertex(x, y, height_origin, al_color_name("red"), 0, 0);
  - name: buildH_whole
    type: ALLEGRO_VERTEX
    parameters:
      - name: height_origin
        type: float
        default_argument: 0.0f
    body: return AllegroFlare::build_vertex(x+1, y, height_origin, al_color_name("white"), 0, 0);
  - name: needs_partial_height_side_faces_from_top
    type: bool
    body: return !AllegroFlare::basically_equal(height, (int)height, 0.00001f);
    body_dependency_symbols:
      - AllegroFlare::basically_equal
  - name: infer_number_of_whole_number_cubes_from_bottom
    type: int
    body: |
      return (int)height;
    type: bool
    body: return !AllegroFlare::basically_equal(height, (int)height, 0.00001f);
    body_dependency_symbols:
      - AllegroFlare::basically_equal
  - name: random_color
    type: ALLEGRO_COLOR
    body: |
      static AllegroFlare::Random random;
      static std::vector<ALLEGRO_COLOR> colors = {
         al_color_name("white"),
         //al_color_name("orange"),
         //al_color_name("dimgray"),
         //al_color_name("darkslategray"),
         //al_color_name("firebrick"),
         //al_color_name("darkolivegreen"),
      };
      return colors[random.get_random_int(0, colors.size()-1)];
    body_dependency_symbols:
      - AllegroFlare::Random
  - name: build_pillar
    type: std::vector<ALLEGRO_VERTEX>
    body: |
      // this is the official ordering:
      // top
      // front
      // right
      // left
      // back

      std::vector<ALLEGRO_VERTEX> result = {};
      std::vector<ALLEGRO_VERTEX> partial_height_side_faces_from_top = {};
      std::vector<ALLEGRO_VERTEX> whole_height_side_faces_from_bottom = {};

      std::vector<ALLEGRO_VERTEX> top_face = {
        // top:
        buildC(),
        buildB(),
        buildA(),
        buildB(),
        buildC(),
        buildD()
      };

      if (needs_partial_height_side_faces_from_top())
      {
         partial_height_side_faces_from_top = {};

         std::vector<ALLEGRO_VERTEX> front_face = {
            // front:
            buildE(),
            buildD(),
            buildC(),
            buildD(),
            buildE(),
            buildF(),
         };

         std::vector<ALLEGRO_VERTEX> right_face = {
            // right: // looks correct
            buildF(),
            buildB(),
            buildD(),
            buildB(),
            buildF(),
            buildH(),
         };

         std::vector<ALLEGRO_VERTEX> left_face = {
            // left: // looks correct
            buildG(),
            buildC(),
            buildA(),
            buildC(),
            buildG(),
            buildE(),
         };

         std::vector<ALLEGRO_VERTEX> back_face = {
            // back:
            buildH(),
            buildA(),
            buildB(),
            buildA(),
            buildH(),
            buildG()
         };

         partial_height_side_faces_from_top.insert(partial_height_side_faces_from_top.end(), front_face.begin(), front_face.end());
         partial_height_side_faces_from_top.insert(partial_height_side_faces_from_top.end(), right_face.begin(), right_face.end());
         partial_height_side_faces_from_top.insert(partial_height_side_faces_from_top.end(), left_face.begin(), left_face.end());
         partial_height_side_faces_from_top.insert(partial_height_side_faces_from_top.end(), back_face.begin(), back_face.end());
      }

      for (int z=0; z<infer_number_of_whole_number_cubes_from_bottom(); z++)
      {
         float height_origin = z;

         std::vector<ALLEGRO_VERTEX> vertexes_from_this_pass = {
            // front:
            buildE_whole(height_origin),
            buildD_whole(height_origin),
            buildC_whole(height_origin),
            buildD_whole(height_origin),
            buildE_whole(height_origin),
            buildF_whole(height_origin),

            // right: // looks correct
            buildF_whole(height_origin),
            buildB_whole(height_origin),
            buildD_whole(height_origin),
            buildB_whole(height_origin),
            buildF_whole(height_origin),
            buildH_whole(height_origin),

            // left: // looks correct
            buildG_whole(height_origin),
            buildC_whole(height_origin),
            buildA_whole(height_origin),
            buildC_whole(height_origin),
            buildG_whole(height_origin),
            buildE_whole(height_origin),

            // back:
            buildH_whole(height_origin),
            buildA_whole(height_origin),
            buildB_whole(height_origin),
            buildA_whole(height_origin),
            buildH_whole(height_origin),
            buildG_whole(height_origin)
         };

         whole_height_side_faces_from_bottom.insert(whole_height_side_faces_from_bottom.begin(), vertexes_from_this_pass.begin(), vertexes_from_this_pass.end());
      }

      result.insert(result.end(), top_face.begin(), top_face.end());
      result.insert(result.end(), partial_height_side_faces_from_top.begin(), partial_height_side_faces_from_top.end());
      result.insert(result.end(), whole_height_side_faces_from_bottom.begin(), whole_height_side_faces_from_bottom.end());

      for (auto &vertex : result) { float swap = vertex.y; vertex.y = vertex.z; vertex.z = swap; }

      return result;
    body_dependency_symbols:
      - AllegroFlare::build_vertex
      - al_color_name
dependencies:
  - symbol: std::vector<ALLEGRO_VERTEX>
    headers: [ vector, allegro5/allegro.h, allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::Random
    headers: [ AllegroFlare/Random.hpp ]
  - symbol: Tileo::TileAtlas*
    headers: [ Tileo/TileAtlas.hpp ]
  - symbol: ALLEGRO_VERTEX
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::basically_equal
    headers: [ AllegroFlare/Useful.hpp ]
  - symbol: AllegroFlare::build_vertex
    headers: [ AllegroFlare/Useful.hpp ]
  - symbol: al_color_name
    headers: [ allegro5/allegro_color.h ]

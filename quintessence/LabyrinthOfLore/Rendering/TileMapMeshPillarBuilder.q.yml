properties:
  - name: x
    type: int
    init_with: 0
    constructor_arg: true
  - name: y
    type: int
    init_with: 0
    constructor_arg: true
  - name: height
    type: float
    init_with: 1.0f
    constructor_arg: true
functions:
  - name: buildA
    type: ALLEGRO_VERTEX
    body: return AllegroFlare::build_vertex(x, y, height, al_color_name("white"), 0, 0);
  - name: buildB
    type: ALLEGRO_VERTEX
    body: return AllegroFlare::build_vertex(x+1, y, height, al_color_name("white"), 0, 0);
  - name: buildC
    type: ALLEGRO_VERTEX
    body: return AllegroFlare::build_vertex(x, (y+1), height, al_color_name("white"), 0, 0);
  - name: buildD
    type: ALLEGRO_VERTEX
    body: return AllegroFlare::build_vertex(x+1, (y+1), height, al_color_name("green"), 0, 0);
  - name: buildE
    type: ALLEGRO_VERTEX
    body: return AllegroFlare::build_vertex(x, (y+1), (int)height, al_color_name("dodgerblue"), 0, 0);
  - name: buildF
    type: ALLEGRO_VERTEX
    body: return AllegroFlare::build_vertex(x+1, (y+1), (int)height, al_color_name("white"), 0, 0);
  - name: buildG
    type: ALLEGRO_VERTEX
    body: return AllegroFlare::build_vertex(x, y, (int)height, al_color_name("red"), 0, 0);
  - name: buildH
    type: ALLEGRO_VERTEX
    body: return AllegroFlare::build_vertex(x+1, y, (int)height, al_color_name("white"), 0, 0);
  - name: buildA_whole
    type: ALLEGRO_VERTEX
    parameters:
      - name: height_origin
        type: float
        default_argument: 0.0f
    body: return AllegroFlare::build_vertex(x, y, height_origin+1, al_color_name("white"), 0, 0);
  - name: buildB_whole
    type: ALLEGRO_VERTEX
    parameters:
      - name: height_origin
        type: float
        default_argument: 0.0f
    body: return AllegroFlare::build_vertex(x+1, y, height_origin+1, al_color_name("white"), 0, 0);
  - name: buildC_whole
    type: ALLEGRO_VERTEX
    parameters:
      - name: height_origin
        type: float
        default_argument: 0.0f
    body: return AllegroFlare::build_vertex(x, (y+1), height_origin+1, al_color_name("white"), 0, 0);
  - name: buildD_whole
    type: ALLEGRO_VERTEX
    parameters:
      - name: height_origin
        type: float
        default_argument: 0.0f
    body: return AllegroFlare::build_vertex(x+1, (y+1), height_origin+1, al_color_name("green"), 0, 0);
  - name: buildE_whole
    type: ALLEGRO_VERTEX
    parameters:
      - name: height_origin
        type: float
        default_argument: 0.0f
    body: return AllegroFlare::build_vertex(x, (y+1), height_origin, al_color_name("dodgerblue"), 0, 0);
  - name: buildF_whole
    type: ALLEGRO_VERTEX
    parameters:
      - name: height_origin
        type: float
        default_argument: 0.0f
    body: return AllegroFlare::build_vertex(x+1, (y+1), height_origin, al_color_name("white"), 0, 0);
  - name: buildG_whole
    type: ALLEGRO_VERTEX
    parameters:
      - name: height_origin
        type: float
        default_argument: 0.0f
    body: return AllegroFlare::build_vertex(x, y, height_origin, al_color_name("red"), 0, 0);
  - name: buildH_whole
    type: ALLEGRO_VERTEX
    parameters:
      - name: height_origin
        type: float
        default_argument: 0.0f
    body: return AllegroFlare::build_vertex(x+1, y, height_origin, al_color_name("white"), 0, 0);
  - name: random_color
    type: ALLEGRO_COLOR
    body: |
      static AllegroFlare::Random random;
      static std::vector<ALLEGRO_COLOR> colors = {
         al_color_name("white"),
         //al_color_name("orange"),
         //al_color_name("dimgray"),
         //al_color_name("darkslategray"),
         //al_color_name("firebrick"),
         //al_color_name("darkolivegreen"),
      };
      return colors[random.get_random_int(0, colors.size()-1)];
    body_dependency_symbols:
      - AllegroFlare::Random
  - name: build_pillar
    type: std::vector<ALLEGRO_VERTEX>
    body: |
      ALLEGRO_COLOR cube_color = random_color();
      float u = 0;
      float v = 0; //texture ? al_get_bitmap_width(texture) : 1;
      int tile_width = 48;

      // this is the official ordering:
      // top
      // front
      // right
      // left
      // back

      int integer_floor_of_the_height = (int)height;

      std::vector<ALLEGRO_VERTEX> result = {};

      std::vector<ALLEGRO_VERTEX> top_face = {
        // top:
        buildC(),
        buildB(),
        buildA(),
        buildB(),
        buildC(),
        buildD()
      };

      std::vector<ALLEGRO_VERTEX> side_faces = {
        // front:
        buildE(),
        buildD(),
        buildC(),
        buildD(),
        buildE(),
        buildF(),

        // right: // looks correct
        buildF(),
        buildB(),
        buildD(),
        buildB(),
        buildF(),
        buildH(),

        // left: // looks correct
        buildG(),
        buildC(),
        buildA(),
        buildC(),
        buildG(),
        buildE(),

        // back:
        buildH(),
        buildA(),
        buildB(),
        buildA(),
        buildH(),
        buildG()
      };

      result.insert(result.begin(), top_face.begin(), top_face.end());
      result.insert(result.begin(), side_faces.begin(), side_faces.end());

      for (auto &vertex : result) { float swap = vertex.y; vertex.y = vertex.z; vertex.z = swap; }

      return result;
    body_dependency_symbols:
      - AllegroFlare::build_vertex
      - al_color_name
dependencies:
  - symbol: std::vector<ALLEGRO_VERTEX>
    headers: [ vector, allegro5/allegro.h, allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::Random
    headers: [ AllegroFlare/Random.hpp ]
  - symbol: Tileo::TileAtlas*
    headers: [ Tileo/TileAtlas.hpp ]
  - symbol: ALLEGRO_VERTEX
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::build_vertex
    headers: [ AllegroFlare/Useful.hpp ]
  - symbol: al_color_name
    headers: [ allegro5/allegro_color.h ]

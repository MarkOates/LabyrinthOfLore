properties:
  - name: font
    type: ALLEGRO_FONT*
    init_with: nullptr
    constructor_arg: true
  - name: title_text
    type: LabyrinthOfLore::Hud::TitleText*
    init_with: nullptr
    constructor_arg: true
  - name: place
    type: allegro_flare::placement3d
    init_with: "allegro_flare::placement3d{}"
    constructor_arg: true
functions:
  - name: smoothstep
    type: float
    parameters:
      - name: edge0
        type: float
        default_argument: 0.0f
      - name: edge1
        type: float
        default_argument: 0.0f
      - name: x
        type: float
        default_argument: 0.0f
    body: |
      // Scale, bias and saturate x to 0..1 range
      x = AllegroFlare::clamp((x - edge0) / (edge1 - edge0), 0.0f, 1.0f);
      // Evaluate polynomial
      return x * x * (3 - 2 * x);
    body_dependency_symbols:
      - AllegroFlare::clamp<float>
  - name: decorated_title
    type: std::string
    body: return std::string("- ") + title_text->get_headline_text() + " -";
  - name: render
    type: void
    body: |
      if (!font) throw std::runtime_error("Cannot draw TitleText with a nullptr font");
      if (!title_text) throw std::runtime_error("Cannot draw TitleText with a nullptr title_text");

      float time_changed_at = title_text->get_time_changed_at();
      float time_now = al_get_time();
      float time_since_time_changed_at = time_now - time_changed_at;
      float opacity = (time_since_time_changed_at <= 3.0) ? smoothstep(0.5, 1.5, time_since_time_changed_at) : smoothstep(7.5, 4.5, time_since_time_changed_at);

      if (opacity >= 0.0001)
      {
        place.start_transform();

        ALLEGRO_COLOR color = al_color_name("white");

        color.r *= opacity;
        color.g *= opacity;
        color.b *= opacity;
        color.a *= opacity;

        //al_draw_rounded_rectangle(0, 0, place.size.x, place.size.y, 6, 6, al_color_name("red"), 3.0);
        al_draw_text(font, color, place.size.x/2, place.size.y/2 - 10, ALLEGRO_ALIGN_CENTER, title_text->get_above_text().c_str());
        al_draw_text(font, color, place.size.x/2, place.size.y/2 + 10, ALLEGRO_ALIGN_CENTER, decorated_title().c_str());

        place.restore_transform();
      }

      return;
    body_dependency_symbols:
      - al_get_time
      - al_color_name
      - al_draw_rounded_rectangle
dependencies:
  - symbol: LabyrinthOfLore::Hud::TitleText*
    headers: [ LabyrinthOfLore/Hud/TitleText.hpp ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_get_time
    headers: [ allegro5/allegro_color.h ]
  - symbol: al_color_name
    headers: [ allegro5/allegro_color.h ]
  - symbol: al_draw_rounded_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: allegro_flare::placement3d
    headers: [ allegro_flare/placement3d.h ]
  - symbol: x
    headers: [ y ]
  - symbol: AllegroFlare::clamp<float>
    headers: [ AllegroFlare/Useful.hpp ]
functions:
  - name: run
    type: std::string
    body: return "Hello World!";

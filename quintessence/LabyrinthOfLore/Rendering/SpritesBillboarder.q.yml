properties:
  - name: camera_placement
    type: allegro_flare::placement3d
    init_with: "{}"
    constructor_arg: true
  - name: entities
    type: std::vector<LabyrinthOfLore::Entity::Base*>
    init_with: "{}"
    constructor_arg: true
functions:
  - name: process
    type: void
    body: |

      //ALLEGRO_TRANSFORM transform;

      //camera_placement.build_reverse_transform(&transform);

      AllegroFlare::vec3d camera_rotation = camera_placement.rotation;

      AllegroFlare::vec3d reverse_camera_rotation(
         camera_rotation.x + 0.5, //AllegroFlare::FULL_ROTATION/2,
         camera_rotation.y + 0.5, //AllegroFlare::FULL_ROTATION/2,
         camera_rotation.z + 0.5 //AllegroFlare::FULL_ROTATION/2
      );

      
      for (auto &entity : entities)
      {
         if (entity->get_billboard_at_camera())
         {
            entity->get_placement_ref().rotation = reverse_camera_rotation;
         }
      }
      return;
    body_dependency_symbols:
      - allegro_flare::placement3d
      - AllegroFlare::vec3d
      - AllegroFlare::FULL_ROTATION
dependencies:
  - symbol: std::vector<LabyrinthOfLore::Entity::Base*>
    headers: [ vector, LabyrinthOfLore/Entity/Base.hpp ]
  - symbol: AllegroFlare::FULL_ROTATION
    headers: [ AllegroFlare/Useful.hpp ]
  - symbol: AllegroFlare::vec3d
    headers: [ AllegroFlare/Vec3D.hpp ]
  - symbol: AllegroFlare::vec3d*
    headers: [ AllegroFlare/Vec3D.hpp ]
  - symbol: allegro_flare::placement3d
    headers: [ allegro_flare/placement3d.h ]
  - symbol: vec3d::placement3d
    headers: [ allegro_flare/placement3d.h ]

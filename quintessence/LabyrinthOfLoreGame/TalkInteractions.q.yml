properties:
  - name: thing_id
    type: int
    init_with: 0
    constructor_arg: true
  - name: thing_definition_factory
    type: LabyrinthOfLoreGame::ThingDefinitionFactory*
    init_with: nullptr
    constructor_arg: true
  - name: all_entities
    type: std::vector<LabyrinthOfLore::Entity::Base*>*
    init_with: nullptr
    constructor_arg: true
  - name: thing_dictionary
    type: LabyrinthOfLore::Entity::ThingDictionary*
    init_with: nullptr
    constructor_arg: true
  - name: message_scroll
    type: LabyrinthOfLore::Hud::MessageScroll*
    init_with: nullptr
    constructor_arg: true
  - name: character_panel
    type: LabyrinthOfLore::Hud::CharacterPanel*
    init_with: nullptr
    constructor_arg: true
  - name: player_inventory
    type: AllegroFlare::Inventory*
    init_with: nullptr
    constructor_arg: true
  - name: time_now
    type: float
    init_with: 0.0f
    constructor_arg: true
  - name: THING_ID_ATTRIBUTE
    type: std::string
    static: true
    const: true
    init_with: "\"thing_id\""
functions:
  - name: validate_arguments
    body: |
     if (!all_entities) throw std::runtime_error("Cannot process_thing_talk_click with a nullptr all_entities");
     if (!thing_definition_factory) throw std::runtime_error("Cannot process_thing_talk_click with a nullptr thing_definition_factory");
     if (!thing_dictionary) throw std::runtime_error("Cannot process_thing_talk_click with a nullptr thing_dictionary");
     if (!message_scroll) throw std::runtime_error("Cannot process_thing_talk_click with a nullptr message_scroll");
     if (!character_panel) throw std::runtime_error("Cannot process_thing_talk_click with a nullptr character_panel");
     if (!player_inventory) throw std::runtime_error("Cannot process_thing_talk_click with a nullptr player_inventory");
     thing_dictionary->find_definition_ref(thing_id); // <- will raise an exception if can't be found

     return;
  - name: character_speaks
    parameters:
      - name: message
        type: std::string
        default_argument: "\"\""
    body: |
       message_scroll->append_character_dialog(time_now, message);
  - name: append_message
    parameters:
      - name: message
        type: std::string
        default_argument: "\"\""
    body: |
       message_scroll->append_message(time_now, message);
  - name: you_talk_to
    type: bool
    parameters:
      - name: possible_thing_id_talking_to
        type: int
        default_argument: -1
    body: |
       return thing_id == possible_thing_id_talking_to;
  - name: player_has_item
    type: bool
    parameters:
      - name: item_id
        type: int
        default_argument: -1
    body: |
       return player_inventory->has_item(item_id);
  - name: player_has_thing_of_type
    type: bool
    parameters:
      - name: thing_type
        type: thing_type_t
        default_argument: THING_TYPE_UNDEFINED
    body: |
       if (!character_panel) throw std::runtime_error("cannot player_has_thing_of_type on a nullptr character_panel");
       return character_panel->calculate_count_of_type(thing_type);
  - name: process
    parameters:
      - name: time_now
        type: float
        default_argument: 0.0f
    body: |
      LabyrinthOfLore::Entity::ThingDefinition &this_thing_definition = thing_dictionary->find_definition_ref(thing_id);

      int new_id = -1;

      if (you_talk_to(MAN_AT_THE_ENTRANCE_TO_THE_CAVE))
      {
         if (player_has_item(ITEM_INFINITY_TORCH_ID)) {
            character_speaks("You found the Infinity Torch! Amazing! You are surely a " \
                             "seeker of truth! You have a long quest ahead of you, take this.");
         }
         else if (player_has_item(ITEM_TORCH_OF_TRUTH)) {
            character_speaks("Wowza! I thought the infinity torch you got was cool, but this is... this is... unbelievable!!");
         }
         else {
            character_speaks("Hey traveler! Down this cavern is a runestone of immaginable power. " \
                              "If you dare to go, you'll need to keep a lit torch or the darkness will attack you.");
         }
      }

      if (you_talk_to(CATALINA_IN_THE_VILLAGE))
      {
         character_speaks("Hello there young one. Look at you. You have so much life. I've been here for far to long, and " \
                          "miss so deeply my loved ones. I wonder if they still think of me...");
      }

      if (you_talk_to(HARCOURT_IN_THE_VILLAGE))
      {
         //if (!player_has_thing_of_type(THING_TYPE_TORCH_FUEL))
         //{
            //character_speaks("It's not so great down here. We all do our best to help each other out. " \
                             //"You look like you're low on torch fuel. Have some of mine.");

            //while(character_panel->
            //player_inventory->add_item(thing_dictionary->create_new_definition({THING_TYPE_TORCH_FUEL, "some", "torch fuel"}));
            //player_inventory->add_item(thing_dictionary->create_new_definition({THING_TYPE_TORCH_FUEL, "some", "torch fuel"}));
            //player_inventory->add_item(thing_dictionary->create_new_definition({THING_TYPE_TORCH_FUEL, "some", "torch fuel"}));
         //}
         //else
         {
            character_speaks("You look like an avatar I once knew. So strong and powerful, they once saved us all. Maybe you can do the same.");
         }
      }

      return;
    body_dependency_symbols:
      - std::stringstream
      - LabyrinthOfLoreGame::ItemIdEnums
dependencies:
  - symbol: std::vector<LabyrinthOfLore::Entity::Base*>*
    headers: [ vector, LabyrinthOfLore/Entity/Base.hpp ]
  - symbol: LabyrinthOfLore::Entity::Base*
    headers: [ LabyrinthOfLore/Entity/Base.hpp ]
  - symbol: LabyrinthOfLore::Entity::ThingDictionary*
    headers: [ LabyrinthOfLore/Entity/ThingDictionary.hpp ]
  - symbol: LabyrinthOfLore::Hud::MessageScroll*
    headers: [ LabyrinthOfLore/Hud/MessageScroll.hpp ]
  - symbol: LabyrinthOfLore::Hud::CharacterPanel*
    headers: [ LabyrinthOfLore/Hud/CharacterPanel.hpp ]
  - symbol: AllegroFlare::Inventory*
    headers: [ AllegroFlare/Inventory.hpp ]
  - symbol: LabyrinthOfLoreGame::ItemIdEnums
    headers: [ LabyrinthOfLoreGame/ItemIdEnums.hpp ]
  - symbol: std::stringstream
    headers: [ sstream ]
  - symbol: LabyrinthOfLoreGame::ThingDefinitionFactory*
    headers: [ LabyrinthOfLoreGame/ThingDefinitionFactory.hpp ]
  - symbol: thing_type_t
    headers: [ LabyrinthOfLoreGame/ItemIdEnums.hpp ]

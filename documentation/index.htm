<!DOCTYPE html>
<head>
<style>
html
{
  background-color: #09090c;
  color: #dfdfdf;
}
*
{
  font-family: 'Arial';
  padding: 3px 20px;
}
table td
{
  padding: 3px 20px;
}
.property
{
  color: dodgerblue;
}
.private_property
{
  color: aliceblue;
}

.method
{
  color: orange;
}

.private_method
{
  color: pink;
}

.dependency
{
  color: #9f9fa1;
}

.component
{
  padding: 20 10 20 10;
  margin: 20 10 20 10;
  background-color: #1a1a1c;
}

.component h3
{
}
</style>
</head>
<body>
<h1>Table of Contents</h1>
<ul>
  <li><a href="#.removed/quintessence/LabyrinthOfLore/Rendering/Hud/MessageScrollRenderer.q.yml">.removed/quintessence/LabyrinthOfLore/Rendering/Hud/MessageScrollRenderer.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Entity/Base.q.yml">quintessence/LabyrinthOfLore/Entity/Base.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Entity/Cleanup.q.yml">quintessence/LabyrinthOfLore/Entity/Cleanup.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Entity/Selector.q.yml">quintessence/LabyrinthOfLore/Entity/Selector.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Entity/ThingDefinition.q.yml">quintessence/LabyrinthOfLore/Entity/ThingDefinition.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Entity/ThingDictionary.q.yml">quintessence/LabyrinthOfLore/Entity/ThingDictionary.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Gameplay/Screen.q.yml">quintessence/LabyrinthOfLore/Gameplay/Screen.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Hud/CharacterPanel.q.yml">quintessence/LabyrinthOfLore/Hud/CharacterPanel.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Hud/CommandPanel.q.yml">quintessence/LabyrinthOfLore/Hud/CommandPanel.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Hud/CommandsHintPane.q.yml">quintessence/LabyrinthOfLore/Hud/CommandsHintPane.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Hud/Compass.q.yml">quintessence/LabyrinthOfLore/Hud/Compass.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Hud/CurrentSpells.q.yml">quintessence/LabyrinthOfLore/Hud/CurrentSpells.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Hud/MapButton.q.yml">quintessence/LabyrinthOfLore/Hud/MapButton.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Hud/MessageScroll.q.yml">quintessence/LabyrinthOfLore/Hud/MessageScroll.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Hud/RotateCharacterPanelButton.q.yml">quintessence/LabyrinthOfLore/Hud/RotateCharacterPanelButton.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Hud/RuneShelf.q.yml">quintessence/LabyrinthOfLore/Hud/RuneShelf.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Hud/TitleText.q.yml">quintessence/LabyrinthOfLore/Hud/TitleText.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Hud/ViewFrame.q.yml">quintessence/LabyrinthOfLore/Hud/ViewFrame.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Hud/VitalityAndManaBar.q.yml">quintessence/LabyrinthOfLore/Hud/VitalityAndManaBar.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Physics/EntityTileMapCollisionEvent.q.yml">quintessence/LabyrinthOfLore/Physics/EntityTileMapCollisionEvent.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Physics/EntityTileMapCollisionStepper.q.yml">quintessence/LabyrinthOfLore/Physics/EntityTileMapCollisionStepper.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Physics/EntityZoneCollisionEvent.q.yml">quintessence/LabyrinthOfLore/Physics/EntityZoneCollisionEvent.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Physics/EntityZoneCollisionObserver.q.yml">quintessence/LabyrinthOfLore/Physics/EntityZoneCollisionObserver.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Physics/GravityStepper.q.yml">quintessence/LabyrinthOfLore/Physics/GravityStepper.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Rendering/Camera.q.yml">quintessence/LabyrinthOfLore/Rendering/Camera.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Rendering/EntityPickingRenderer.q.yml">quintessence/LabyrinthOfLore/Rendering/EntityPickingRenderer.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Rendering/EntityRenderer.q.yml">quintessence/LabyrinthOfLore/Rendering/EntityRenderer.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Rendering/Hud/CharacterPanelRenderer.q.yml">quintessence/LabyrinthOfLore/Rendering/Hud/CharacterPanelRenderer.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Rendering/Hud/CommandPanelRenderer.q.yml">quintessence/LabyrinthOfLore/Rendering/Hud/CommandPanelRenderer.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Rendering/Hud/CommandsHintPaneRenderer.q.yml">quintessence/LabyrinthOfLore/Rendering/Hud/CommandsHintPaneRenderer.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Rendering/Hud/CompassRenderer.q.yml">quintessence/LabyrinthOfLore/Rendering/Hud/CompassRenderer.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Rendering/Hud/CurrentSpellsRenderer.q.yml">quintessence/LabyrinthOfLore/Rendering/Hud/CurrentSpellsRenderer.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Rendering/Hud/MapButtonRenderer.q.yml">quintessence/LabyrinthOfLore/Rendering/Hud/MapButtonRenderer.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Rendering/Hud/MessageScrollRenderer.q.yml">quintessence/LabyrinthOfLore/Rendering/Hud/MessageScrollRenderer.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Rendering/Hud/Renderer.q.yml">quintessence/LabyrinthOfLore/Rendering/Hud/Renderer.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Rendering/Hud/RotateCharacterPanelButtonRenderer.q.yml">quintessence/LabyrinthOfLore/Rendering/Hud/RotateCharacterPanelButtonRenderer.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Rendering/Hud/RuneShelfRenderer.q.yml">quintessence/LabyrinthOfLore/Rendering/Hud/RuneShelfRenderer.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Rendering/Hud/TitleTextRenderer.q.yml">quintessence/LabyrinthOfLore/Rendering/Hud/TitleTextRenderer.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Rendering/Hud/ViewFrameRenderer.q.yml">quintessence/LabyrinthOfLore/Rendering/Hud/ViewFrameRenderer.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Rendering/Hud/VitalityAndManaBarRenderer.q.yml">quintessence/LabyrinthOfLore/Rendering/Hud/VitalityAndManaBarRenderer.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Rendering/MousePointer.q.yml">quintessence/LabyrinthOfLore/Rendering/MousePointer.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Rendering/PickingBufferRenderer.q.yml">quintessence/LabyrinthOfLore/Rendering/PickingBufferRenderer.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Rendering/SceneRenderer.q.yml">quintessence/LabyrinthOfLore/Rendering/SceneRenderer.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Rendering/SpritesBillboarder.q.yml">quintessence/LabyrinthOfLore/Rendering/SpritesBillboarder.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Rendering/TileMapMesh.q.yml">quintessence/LabyrinthOfLore/Rendering/TileMapMesh.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Rendering/TileMapMeshCubeBuilder.q.yml">quintessence/LabyrinthOfLore/Rendering/TileMapMeshCubeBuilder.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Rendering/TileMapMeshCubeTexturer.q.yml">quintessence/LabyrinthOfLore/Rendering/TileMapMeshCubeTexturer.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Rendering/TileMapMeshPillarBuilder.q.yml">quintessence/LabyrinthOfLore/Rendering/TileMapMeshPillarBuilder.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Rendering/TileMapMeshPillarTexturer.q.yml">quintessence/LabyrinthOfLore/Rendering/TileMapMeshPillarTexturer.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Rendering/TileMapWaterMesh.q.yml">quintessence/LabyrinthOfLore/Rendering/TileMapWaterMesh.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Rendering/TileTypeDefinition.q.yml">quintessence/LabyrinthOfLore/Rendering/TileTypeDefinition.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Rendering/TileTypeDictionary.q.yml">quintessence/LabyrinthOfLore/Rendering/TileTypeDictionary.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Shader/Base.q.yml">quintessence/LabyrinthOfLore/Shader/Base.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Shader/ClampedColor.q.yml">quintessence/LabyrinthOfLore/Shader/ClampedColor.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Shader/DepthDarken.q.yml">quintessence/LabyrinthOfLore/Shader/DepthDarken.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/Shader/FlatColor.q.yml">quintessence/LabyrinthOfLore/Shader/FlatColor.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/World.q.yml">quintessence/LabyrinthOfLore/World.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/WorldMap/BasicRenderer.q.yml">quintessence/LabyrinthOfLore/WorldMap/BasicRenderer.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/WorldMap/BitmapFilenameToWorldBuilder.q.yml">quintessence/LabyrinthOfLore/WorldMap/BitmapFilenameToWorldBuilder.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/WorldMap/BitmapTileMapLoader.q.yml">quintessence/LabyrinthOfLore/WorldMap/BitmapTileMapLoader.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/WorldMap/Door.q.yml">quintessence/LabyrinthOfLore/WorldMap/Door.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/WorldMap/Level.q.yml">quintessence/LabyrinthOfLore/WorldMap/Level.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/WorldMap/MultiBitmapFilenameToWorldBuilder.q.yml">quintessence/LabyrinthOfLore/WorldMap/MultiBitmapFilenameToWorldBuilder.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/WorldMap/MultiBitmapTileMapLoader.q.yml">quintessence/LabyrinthOfLore/WorldMap/MultiBitmapTileMapLoader.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/WorldMap/PixelRenderer.q.yml">quintessence/LabyrinthOfLore/WorldMap/PixelRenderer.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/WorldMap/Tile.q.yml">quintessence/LabyrinthOfLore/WorldMap/Tile.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/WorldMap/TileMapLoader.q.yml">quintessence/LabyrinthOfLore/WorldMap/TileMapLoader.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLore/WorldMap/Zone.q.yml">quintessence/LabyrinthOfLore/WorldMap/Zone.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLoreGame/Classic.q.yml">quintessence/LabyrinthOfLoreGame/Classic.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLoreGame/Interactions.q.yml">quintessence/LabyrinthOfLoreGame/Interactions.q.yml</a></li>
  <li><a href="#quintessence/LabyrinthOfLoreGame/ThingDefinitionFactory.q.yml">quintessence/LabyrinthOfLoreGame/ThingDefinitionFactory.q.yml</a></li>
  <li><a href="#quintessence/Tileo/TileIndexInfo.q.yml">quintessence/Tileo/TileIndexInfo.q.yml</a></li>
</ul>
<h1>Components</h1>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id=".removed/quintessence/LabyrinthOfLore/Rendering/Hud/MessageScrollRenderer.q.yml">.removed/quintessence/LabyrinthOfLore/Rendering/Hud/MessageScrollRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font</td>
  <td class="property">ALLEGRO_FONT*</td>
</tr>
<tr>
  <td class="property">message_scroll</td>
  <td class="property">LabyrinthOfLore::Hud::MessageScroll*</td>
</tr>
<tr>
  <td class="property">place</td>
  <td class="property">allegro_flare::placement3d</td>
</tr>
<tr>
  <td class="property">message_display_length_sec</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">__dirty_total_line_count</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">__dirty_this_text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">float</td>
  <td class="method"><b>smoothstep</b>(float edge0=0.0f, float edge1=0.0f, float x=0.0f)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>multiline_draw_callback</b>(int line_num=0, const char* line=nullptr, int size=0, void* extra=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Hud::MessageScroll&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Hud/MessageScroll.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;allegro_flare::placement3d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;x&quot;, &quot;headers&quot;=&gt;[&quot;y&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::tuple&lt;float, std::string, int&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;utility&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;void*&quot;, &quot;headers&quot;=&gt;[]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;const char*&quot;, &quot;headers&quot;=&gt;[]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::clamp&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Entity/Base.q.yml">quintessence/LabyrinthOfLore/Entity/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">model</td>
  <td class="property">AllegroFlare::Model3D*</td>
</tr>
<tr>
  <td class="property">identifier_for_level_within</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">placement</td>
  <td class="property">allegro_flare::placement3d</td>
</tr>
<tr>
  <td class="property">velocity</td>
  <td class="property">allegro_flare::placement3d</td>
</tr>
<tr>
  <td class="property">billboard_at_camera</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ElementID&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ElementID.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;allegro_flare::placement3d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Model3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Model3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Entity/Cleanup.q.yml">quintessence/LabyrinthOfLore/Entity/Cleanup.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">all_entities</td>
  <td class="property">std::vector&lt;LabyrinthOfLore::Entity::Base*&gt;*</td>
</tr>
<tr>
  <td class="property">CLEANUP_FLAG</td>
  <td class="property"></td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">int</td>
  <td class="method"><b>cleanup</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Entity::Base&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Entity/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Entity/Selector.q.yml">quintessence/LabyrinthOfLore/Entity/Selector.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">all_entities</td>
  <td class="property">std::vector&lt;LabyrinthOfLore::Entity::Base*&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::vector&lt;LabyrinthOfLore::Entity::Base*&gt;</td>
  <td class="method"><b>select_within_level</b>(std::string level_identifier=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Entity::Base&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Entity/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Entity/ThingDefinition.q.yml">quintessence/LabyrinthOfLore/Entity/ThingDefinition.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">thing_type_t</td>
</tr>
<tr>
  <td class="property">article</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">tile_atlas</td>
  <td class="property">Tileo::TileAtlas*</td>
</tr>
<tr>
  <td class="property">tile_atlas_index_id</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">weight</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">health</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">mood</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">condition</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>infer_is_dead</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>infer_short_decorated_name</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>infer_decorated_name</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::stringstream&quot;, &quot;headers&quot;=&gt;[&quot;sstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tileo::TileAtlas&quot;, &quot;headers&quot;=&gt;[&quot;Tileo/TileAtlas.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;thing_type_t&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLoreGame/ItemIdEnums.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Entity/ThingDictionary.q.yml">quintessence/LabyrinthOfLore/Entity/ThingDictionary.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">definitions</td>
  <td class="property">std::map&lt;int, LabyrinthOfLore::Entity::ThingDefinition&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">int</td>
  <td class="method"><b>size</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>create_new_definition</b>(LabyrinthOfLore::Entity::ThingDefinition thing={})</td>
</tr>
<tr>
  <td class="method">LabyrinthOfLore::Entity::ThingDefinition</td>
  <td class="method"><b>find_definition</b>(int tile_type=0)</td>
</tr>
<tr>
  <td class="method">LabyrinthOfLore::Entity::ThingDefinition&amp;</td>
  <td class="method"><b>find_definition_ref</b>(int tile_type=0)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Entity::ThingDefinition&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Entity/ThingDefinition.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Entity::ThingDefinition&amp;&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Entity/ThingDefinition.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;int, LabyrinthOfLore::Entity::ThingDefinition&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;LabyrinthOfLore/Entity/ThingDefinition.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Gameplay/Screen.q.yml">quintessence/LabyrinthOfLore/Gameplay/Screen.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">model_bin</td>
  <td class="property">AllegroFlare::ModelBin*</td>
</tr>
<tr>
  <td class="property">profiler</td>
  <td class="property">AllegroFlare::Profiler*</td>
</tr>
<tr>
  <td class="property">render_surface_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">render_surface_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">render_surface_display</td>
  <td class="property">ALLEGRO_DISPLAY*</td>
</tr>
<tr>
  <td class="property">gameplay_element</td>
  <td class="property">LabyrinthOfLore::Gameplay::Gameplay</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_event_emitter</b>(AllegroFlare::EventEmitter* event_emitter=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_bitmap_bin</b>(AllegroFlare::BitmapBin* bitmap_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_font_bin</b>(AllegroFlare::FontBin* font_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_model_bin</b>(AllegroFlare::ModelBin* model_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_profiler</b>(AllegroFlare::Profiler* profiler=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_render_surface_width</b>(int render_surface_width=0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_render_surface_height</b>(int render_surface_height=0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_render_surface_display</b>(ALLEGRO_DISPLAY* render_surface_display=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_activate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_deactivate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>primary_timer_func</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_button_up_func</b>(AllegroFlare::Player* player=nullptr, AllegroFlare::VirtualControllers::Base* virtual_controller=nullptr, int virtual_controller_button_num=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_button_down_func</b>(AllegroFlare::Player* player=nullptr, AllegroFlare::VirtualControllers::Base* virtual_controller=nullptr, int virtual_controller_button_num=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_axis_change_func</b>(ALLEGRO_EVENT* ev=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>mouse_axes_func</b>(ALLEGRO_EVENT* ev=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>mouse_down_func</b>(ALLEGRO_EVENT* ev=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>key_char_func</b>(ALLEGRO_EVENT* ev=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>key_up_func</b>(ALLEGRO_EVENT* ev=nullptr)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ModelBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ModelBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Profiler&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Profiler.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Player&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Player.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Gameplay::Gameplay&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Gameplay/Gameplay.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Hud/CharacterPanel.q.yml">quintessence/LabyrinthOfLore/Hud/CharacterPanel.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">player_inventory</td>
  <td class="property">AllegroFlare::Inventory*</td>
</tr>
<tr>
  <td class="property">thing_dictionary</td>
  <td class="property">LabyrinthOfLore::Entity::ThingDictionary*</td>
</tr>
<tr>
  <td class="property">cursor_x</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">cursor_y</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>move_cursor_up</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>move_cursor_down</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>calculate_count_of_type</b>(thing_type_t thing_type=THING_TYPE_UNDEFINED)</td>
</tr>
<tr>
  <td class="method">std::map&lt;thing_type_t, int&gt;</td>
  <td class="method"><b>get_inventory_rollup</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>calculate_attack_strength</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>calculate_total_carry_strength</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>calculate_current_carry_weight</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>calculate_available_remaining_carry_weight</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>has_item</b>(int item_id=0)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Inventory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Inventory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Entity::ThingDictionary&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Entity/ThingDictionary.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;int&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;thing_type_t&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLoreGame/ItemIdEnums.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;thing_type_t, int&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Hud/CommandPanel.q.yml">quintessence/LabyrinthOfLore/Hud/CommandPanel.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">current_mode</td>
  <td class="property">LabyrinthOfLore::Hud::command_mode_t</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>run</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Hud::command_mode_t&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Hud/CommandPanelModeEnum.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Hud/CommandsHintPane.q.yml">quintessence/LabyrinthOfLore/Hud/CommandsHintPane.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>run</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Hud/Compass.q.yml">quintessence/LabyrinthOfLore/Hud/Compass.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>run</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Hud/CurrentSpells.q.yml">quintessence/LabyrinthOfLore/Hud/CurrentSpells.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>run</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Hud/MapButton.q.yml">quintessence/LabyrinthOfLore/Hud/MapButton.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>run</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Hud/MessageScroll.q.yml">quintessence/LabyrinthOfLore/Hud/MessageScroll.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">messages</td>
  <td class="property">std::vector&lt;std::tuple&lt;float, std::string, int&gt;&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_last_message_text</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::tuple&lt;float, std::string, int&gt;&gt;</td>
  <td class="method"><b>get_messages_ref</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::tuple&lt;float, std::string, int&gt;&gt;</td>
  <td class="method"><b>get_last_3_messages</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>append_text</b>(std::string text_to_append=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>append_message</b>(float time_of_message=0.0f, std::string text_to_append=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>append_character_dialog</b>(float time_of_message=0.0f, std::string text_to_append=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>clear_text</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::tuple&lt;float, std::string, int&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;tuple&quot;, &quot;string&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Hud/RotateCharacterPanelButton.q.yml">quintessence/LabyrinthOfLore/Hud/RotateCharacterPanelButton.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>run</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Hud/RuneShelf.q.yml">quintessence/LabyrinthOfLore/Hud/RuneShelf.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>run</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Hud/TitleText.q.yml">quintessence/LabyrinthOfLore/Hud/TitleText.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">above_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">headline_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">time_changed_at</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set</b>(std::string above_text=&quot;&quot;, std::string headline_text=&quot;&quot;, float time_now=0.0f)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Hud/ViewFrame.q.yml">quintessence/LabyrinthOfLore/Hud/ViewFrame.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>run</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Hud/VitalityAndManaBar.q.yml">quintessence/LabyrinthOfLore/Hud/VitalityAndManaBar.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>run</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Physics/EntityTileMapCollisionEvent.q.yml">quintessence/LabyrinthOfLore/Physics/EntityTileMapCollisionEvent.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">LabyrinthOfLore::Entity::Base*</td>
</tr>
<tr>
  <td class="property">tile_type</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_x</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_y</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_face_collided_with</td>
  <td class="property">LabyrinthOfLore::WorldMap::tile_face_t</td>
</tr>
<tr>
  <td class="property">force</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Entity::Base&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Entity/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::tile_face_t&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/TileFaceEnum.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Physics/EntityTileMapCollisionStepper.q.yml">quintessence/LabyrinthOfLore/Physics/EntityTileMapCollisionStepper.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">dummy_tile_map</td>
  <td class="property">LabyrinthOfLore::WorldMap::TileMap</td>
</tr>
<tr>
  <td class="property">tile_map</td>
  <td class="property">LabyrinthOfLore::WorldMap::TileMap&amp;</td>
</tr>
<tr>
  <td class="property">entities</td>
  <td class="property">std::vector&lt;LabyrinthOfLore::Entity::Base*&gt;</td>
</tr>
<tr>
  <td class="property">ceiling_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">floor_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">auto_ascend_threshold</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">offset_at_collision_edge</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">events_from_last_processed_step</td>
  <td class="property">std::vector&lt;LabyrinthOfLore::Physics::EntityTileMapCollisionEvent&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">LabyrinthOfLore::WorldMap::TileMap&amp;</td>
  <td class="method"><b>get_dummy_tile_map</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>process_step</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Entity::Base&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Entity/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fabs&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::tile_face_t&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/TileFaceEnum.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Physics::EntityTileMapCollisionEvent&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Physics/EntityTileMapCollisionEvent.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Physics::EntityTileMapCollisionEvent&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Physics/EntityTileMapCollisionEvent.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Physics/EntityZoneCollisionEvent.q.yml">quintessence/LabyrinthOfLore/Physics/EntityZoneCollisionEvent.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">zone_id</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">entity</td>
  <td class="property">LabyrinthOfLore::Entity::Base*</td>
</tr>
<tr>
  <td class="property">event_type</td>
  <td class="property">LabyrinthOfLore::Physics::zone_collision_event_t</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Entity::Base&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Entity/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Physics::zone_collision_event_t&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Physics/ZoneCollisionEventEnum.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Physics/EntityZoneCollisionObserver.q.yml">quintessence/LabyrinthOfLore/Physics/EntityZoneCollisionObserver.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">collisions_at_start</td>
  <td class="property">std::vector&lt;std::pair&lt;LabyrinthOfLore::Entity::Base*, LabyrinthOfLore::WorldMap::Zone*&gt;&gt;</td>
</tr>
<tr>
  <td class="property">collisions_at_end</td>
  <td class="property">std::vector&lt;std::pair&lt;LabyrinthOfLore::Entity::Base*, LabyrinthOfLore::WorldMap::Zone*&gt;&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::vector&lt;std::pair&lt;LabyrinthOfLore::Entity::Base*, LabyrinthOfLore::WorldMap::Zone*&gt;&gt;</td>
  <td class="method"><b>get_collided</b>(std::vector&lt;LabyrinthOfLore::Entity::Base*&gt; entities={}, std::vector&lt;LabyrinthOfLore::WorldMap::Zone*&gt; zones={})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>observe_start_state</b>(std::vector&lt;LabyrinthOfLore::Entity::Base*&gt; entities={}, std::vector&lt;LabyrinthOfLore::WorldMap::Zone*&gt; zones={})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>observe_end_state</b>(std::vector&lt;LabyrinthOfLore::Entity::Base*&gt; entities={}, std::vector&lt;LabyrinthOfLore::WorldMap::Zone*&gt; zones={})</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::pair&lt;LabyrinthOfLore::Entity::Base*, LabyrinthOfLore::WorldMap::Zone*&gt;&gt;</td>
  <td class="method"><b>collisions_added</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::pair&lt;LabyrinthOfLore::Entity::Base*, LabyrinthOfLore::WorldMap::Zone*&gt;&gt;</td>
  <td class="method"><b>collisions_removed</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::Zone&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/Zone.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Entity::Base&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Entity/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::set_difference&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Physics/GravityStepper.q.yml">quintessence/LabyrinthOfLore/Physics/GravityStepper.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entities</td>
  <td class="property">std::vector&lt;LabyrinthOfLore::Entity::Base*&gt;</td>
</tr>
<tr>
  <td class="property">gravity</td>
  <td class="property">AllegroFlare::vec3d</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>process_step</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec3d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Entity::Base&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Entity/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Rendering/Camera.q.yml">quintessence/LabyrinthOfLore/Rendering/Camera.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">position</td>
  <td class="property">AllegroFlare::vec3d</td>
</tr>
<tr>
  <td class="property">yaw</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">pitch</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>build_custom_reverse_transform</b>(allegro_flare::placement3d* placement=nullptr, ALLEGRO_TRANSFORM* transform=nullptr)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>set_perspective_transform</b>(ALLEGRO_BITMAP* surface=nullptr, ALLEGRO_TRANSFORM* transform=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>start_projection</b>(ALLEGRO_BITMAP* surface=nullptr)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec3d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;allegro_flare::placement3d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_TRANSFORM&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TAU&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;tan&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Rendering/EntityPickingRenderer.q.yml">quintessence/LabyrinthOfLore/Rendering/EntityPickingRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">LabyrinthOfLore::Entity::Base*</td>
</tr>
<tr>
  <td class="property">clamped_color_shader</td>
  <td class="property">LabyrinthOfLore::Shader::ClampedColor*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_with_custom_transform</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Entity::Base&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Entity/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Shader::ClampedColor&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Shader/ClampedColor.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ColorIDConverter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ColorIDConverter.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Rendering/EntityRenderer.q.yml">quintessence/LabyrinthOfLore/Rendering/EntityRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">LabyrinthOfLore::Entity::Base*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_with_legacy_transform</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_with_custom_transform</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Entity::Base&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Entity/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Rendering/Hud/CharacterPanelRenderer.q.yml">quintessence/LabyrinthOfLore/Rendering/Hud/CharacterPanelRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font</td>
  <td class="property">ALLEGRO_FONT*</td>
</tr>
<tr>
  <td class="property">character_panel</td>
  <td class="property">LabyrinthOfLore::Hud::CharacterPanel*</td>
</tr>
<tr>
  <td class="property">place</td>
  <td class="property">allegro_flare::placement3d</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Hud::CharacterPanel&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Hud/CharacterPanel.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;allegro_flare::placement3d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;x&quot;, &quot;headers&quot;=&gt;[&quot;y&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Rendering/Hud/CommandPanelRenderer.q.yml">quintessence/LabyrinthOfLore/Rendering/Hud/CommandPanelRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font</td>
  <td class="property">ALLEGRO_FONT*</td>
</tr>
<tr>
  <td class="property">command_panel</td>
  <td class="property">LabyrinthOfLore::Hud::CommandPanel*</td>
</tr>
<tr>
  <td class="property">place</td>
  <td class="property">allegro_flare::placement3d</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Hud::CommandPanel&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Hud/CommandPanel.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;allegro_flare::placement3d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;x&quot;, &quot;headers&quot;=&gt;[&quot;y&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Hud::command_mode_t&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Hud/CommandPanelModeEnum.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Rendering/Hud/CommandsHintPaneRenderer.q.yml">quintessence/LabyrinthOfLore/Rendering/Hud/CommandsHintPaneRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font</td>
  <td class="property">ALLEGRO_FONT*</td>
</tr>
<tr>
  <td class="property">commands_hint_pane</td>
  <td class="property">LabyrinthOfLore::Hud::CommandsHintPane*</td>
</tr>
<tr>
  <td class="property">place</td>
  <td class="property">allegro_flare::placement3d</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>run</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Hud::CommandsHintPane&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Hud/CommandsHintPane.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;allegro_flare::placement3d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;x&quot;, &quot;headers&quot;=&gt;[&quot;y&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Rendering/Hud/CompassRenderer.q.yml">quintessence/LabyrinthOfLore/Rendering/Hud/CompassRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font</td>
  <td class="property">ALLEGRO_FONT*</td>
</tr>
<tr>
  <td class="property">compass</td>
  <td class="property">LabyrinthOfLore::Hud::Compass*</td>
</tr>
<tr>
  <td class="property">place</td>
  <td class="property">allegro_flare::placement3d</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>run</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Hud::Compass&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Hud/Compass.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;allegro_flare::placement3d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;x&quot;, &quot;headers&quot;=&gt;[&quot;y&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Rendering/Hud/CurrentSpellsRenderer.q.yml">quintessence/LabyrinthOfLore/Rendering/Hud/CurrentSpellsRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font</td>
  <td class="property">ALLEGRO_FONT*</td>
</tr>
<tr>
  <td class="property">current_spells</td>
  <td class="property">LabyrinthOfLore::Hud::CurrentSpells*</td>
</tr>
<tr>
  <td class="property">place</td>
  <td class="property">allegro_flare::placement3d</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>run</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Hud::CurrentSpells&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Hud/CurrentSpells.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;allegro_flare::placement3d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;x&quot;, &quot;headers&quot;=&gt;[&quot;y&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Rendering/Hud/MapButtonRenderer.q.yml">quintessence/LabyrinthOfLore/Rendering/Hud/MapButtonRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font</td>
  <td class="property">ALLEGRO_FONT*</td>
</tr>
<tr>
  <td class="property">map_button</td>
  <td class="property">LabyrinthOfLore::Hud::MapButton*</td>
</tr>
<tr>
  <td class="property">place</td>
  <td class="property">allegro_flare::placement3d</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>run</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Hud::MapButton&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Hud/MapButton.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;allegro_flare::placement3d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;x&quot;, &quot;headers&quot;=&gt;[&quot;y&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Rendering/Hud/MessageScrollRenderer.q.yml">quintessence/LabyrinthOfLore/Rendering/Hud/MessageScrollRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font</td>
  <td class="property">ALLEGRO_FONT*</td>
</tr>
<tr>
  <td class="property">message_scroll</td>
  <td class="property">LabyrinthOfLore::Hud::MessageScroll*</td>
</tr>
<tr>
  <td class="property">place</td>
  <td class="property">allegro_flare::placement3d</td>
</tr>
<tr>
  <td class="property">message_display_length_sec</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">__dirty_total_line_count</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">__dirty_this_text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">float</td>
  <td class="method"><b>smoothstep</b>(float edge0=0.0f, float edge1=0.0f, float x=0.0f)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>multiline_draw_callback</b>(int line_num=0, const char* line=nullptr, int size=0, void* extra=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Hud::MessageScroll&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Hud/MessageScroll.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;allegro_flare::placement3d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::clamp&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Rendering/Hud/Renderer.q.yml">quintessence/LabyrinthOfLore/Rendering/Hud/Renderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">render_surface</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">message_scroll</td>
  <td class="property">LabyrinthOfLore::Hud::MessageScroll*</td>
</tr>
<tr>
  <td class="property">command_panel</td>
  <td class="property">LabyrinthOfLore::Hud::CommandPanel*</td>
</tr>
<tr>
  <td class="property">vitality_and_mana_bar</td>
  <td class="property">LabyrinthOfLore::Hud::VitalityAndManaBar*</td>
</tr>
<tr>
  <td class="property">character_panel</td>
  <td class="property">LabyrinthOfLore::Hud::CharacterPanel*</td>
</tr>
<tr>
  <td class="property">map_button</td>
  <td class="property">LabyrinthOfLore::Hud::MapButton*</td>
</tr>
<tr>
  <td class="property">rune_shelf</td>
  <td class="property">LabyrinthOfLore::Hud::RuneShelf*</td>
</tr>
<tr>
  <td class="property">compass</td>
  <td class="property">LabyrinthOfLore::Hud::Compass*</td>
</tr>
<tr>
  <td class="property">rotate_character_panel_button</td>
  <td class="property">LabyrinthOfLore::Hud::RotateCharacterPanelButton*</td>
</tr>
<tr>
  <td class="property">commands_hint_pane</td>
  <td class="property">LabyrinthOfLore::Hud::CommandsHintPane*</td>
</tr>
<tr>
  <td class="property">current_spells</td>
  <td class="property">LabyrinthOfLore::Hud::CurrentSpells*</td>
</tr>
<tr>
  <td class="property">view_frame</td>
  <td class="property">LabyrinthOfLore::Hud::ViewFrame*</td>
</tr>
<tr>
  <td class="property">title_text</td>
  <td class="property">LabyrinthOfLore::Hud::TitleText*</td>
</tr>
<tr>
  <td class="property">mouse_pointer</td>
  <td class="property">LabyrinthOfLore::Rendering::MousePointer*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">ALLEGRO_FONT*</td>
  <td class="method"><b>get_basic_lettering_font</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_message_scroll</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_command_panel</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_vitality_and_mana_bar</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_character_panel</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_map_button</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_rune_shelf</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_compass</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_rotate_character_panel_button</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_commands_hint_pane</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_current_spells</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_view_frame</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_title_text</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;allegro_flare::placement3d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Hud::VitalityAndManaBar&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Hud/VitalityAndManaBar.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Rendering::Hud::VitalityAndManaBarRenderer&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Rendering/Hud/VitalityAndManaBarRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Hud::CommandPanel&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Hud/CommandPanel.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Hud::CharacterPanel&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Hud/CharacterPanel.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Hud::MessageScroll&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Hud/MessageScroll.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Rendering::Hud::CommandPanelRenderer&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Rendering/Hud/CommandPanelRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Rendering::Hud::CharacterPanelRenderer&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Rendering/Hud/CharacterPanelRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Rendering::Hud::MessageScrollRenderer&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Rendering/Hud/MessageScrollRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Hud::MapButton&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Hud/MapButton.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Rendering::Hud::MapButtonRenderer&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Rendering/Hud/MapButtonRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Hud::RuneShelf&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Hud/RuneShelf.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Rendering::Hud::RuneShelfRenderer&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Rendering/Hud/RuneShelfRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Hud::Compass&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Hud/Compass.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Rendering::Hud::CompassRenderer&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Rendering/Hud/CompassRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Hud::RotateCharacterPanelButton&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Hud/RotateCharacterPanelButton.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Rendering::Hud::RotateCharacterPanelButtonRenderer&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Rendering/Hud/RotateCharacterPanelButtonRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Hud::CommandsHintPane&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Hud/CommandsHintPane.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Rendering::Hud::CommandsHintPaneRenderer&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Rendering/Hud/CommandsHintPaneRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Hud::CurrentSpells&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Hud/CurrentSpells.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Rendering::Hud::CurrentSpellsRenderer&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Rendering/Hud/CurrentSpellsRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Hud::ViewFrame&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Hud/ViewFrame.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Rendering::Hud::ViewFrameRenderer&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Rendering/Hud/ViewFrameRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Hud::TitleText&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Hud/TitleText.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Rendering::Hud::TitleTextRenderer&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Rendering/Hud/TitleTextRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Rendering::MousePointer&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Rendering/MousePointer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::runtime_error&quot;, &quot;headers&quot;=&gt;[&quot;stdexcept&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Rendering/Hud/RotateCharacterPanelButtonRenderer.q.yml">quintessence/LabyrinthOfLore/Rendering/Hud/RotateCharacterPanelButtonRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font</td>
  <td class="property">ALLEGRO_FONT*</td>
</tr>
<tr>
  <td class="property">rotate_character_panel_button</td>
  <td class="property">LabyrinthOfLore::Hud::RotateCharacterPanelButton*</td>
</tr>
<tr>
  <td class="property">place</td>
  <td class="property">allegro_flare::placement3d</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>run</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Hud::RotateCharacterPanelButton&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Hud/RotateCharacterPanelButton.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;allegro_flare::placement3d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;x&quot;, &quot;headers&quot;=&gt;[&quot;y&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Rendering/Hud/RuneShelfRenderer.q.yml">quintessence/LabyrinthOfLore/Rendering/Hud/RuneShelfRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font</td>
  <td class="property">ALLEGRO_FONT*</td>
</tr>
<tr>
  <td class="property">rune_shelf</td>
  <td class="property">LabyrinthOfLore::Hud::RuneShelf*</td>
</tr>
<tr>
  <td class="property">place</td>
  <td class="property">allegro_flare::placement3d</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>run</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Hud::RuneShelf&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Hud/RuneShelf.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;allegro_flare::placement3d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;x&quot;, &quot;headers&quot;=&gt;[&quot;y&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Rendering/Hud/TitleTextRenderer.q.yml">quintessence/LabyrinthOfLore/Rendering/Hud/TitleTextRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font</td>
  <td class="property">ALLEGRO_FONT*</td>
</tr>
<tr>
  <td class="property">title_text</td>
  <td class="property">LabyrinthOfLore::Hud::TitleText*</td>
</tr>
<tr>
  <td class="property">place</td>
  <td class="property">allegro_flare::placement3d</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>run</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Hud::TitleText&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Hud/TitleText.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_time&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;allegro_flare::placement3d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;x&quot;, &quot;headers&quot;=&gt;[&quot;y&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::clamp&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Rendering/Hud/ViewFrameRenderer.q.yml">quintessence/LabyrinthOfLore/Rendering/Hud/ViewFrameRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font</td>
  <td class="property">ALLEGRO_FONT*</td>
</tr>
<tr>
  <td class="property">view_frame</td>
  <td class="property">LabyrinthOfLore::Hud::ViewFrame*</td>
</tr>
<tr>
  <td class="property">place</td>
  <td class="property">allegro_flare::placement3d</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>run</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Hud::ViewFrame&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Hud/ViewFrame.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;allegro_flare::placement3d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;x&quot;, &quot;headers&quot;=&gt;[&quot;y&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Rendering/Hud/VitalityAndManaBarRenderer.q.yml">quintessence/LabyrinthOfLore/Rendering/Hud/VitalityAndManaBarRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font</td>
  <td class="property">ALLEGRO_FONT*</td>
</tr>
<tr>
  <td class="property">vitality_and_mana_bar</td>
  <td class="property">LabyrinthOfLore::Hud::VitalityAndManaBar*</td>
</tr>
<tr>
  <td class="property">place</td>
  <td class="property">allegro_flare::placement3d</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>run</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Hud::VitalityAndManaBar&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Hud/VitalityAndManaBar.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;allegro_flare::placement3d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;x&quot;, &quot;headers&quot;=&gt;[&quot;y&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Rendering/MousePointer.q.yml">quintessence/LabyrinthOfLore/Rendering/MousePointer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Rendering/PickingBufferRenderer.q.yml">quintessence/LabyrinthOfLore/Rendering/PickingBufferRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">picking_buffer</td>
  <td class="property">AllegroFlare::PickingBuffer*</td>
</tr>
<tr>
  <td class="property">camera</td>
  <td class="property">LabyrinthOfLore::Rendering::Camera*</td>
</tr>
<tr>
  <td class="property">tile_map_mesh</td>
  <td class="property">LabyrinthOfLore::Rendering::TileMapMesh</td>
</tr>
<tr>
  <td class="property">entities</td>
  <td class="property">std::vector&lt;LabyrinthOfLore::Entity::Base*&gt;</td>
</tr>
<tr>
  <td class="property">clamped_color_shader</td>
  <td class="property">LabyrinthOfLore::Shader::ClampedColor*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Rendering::Camera&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Rendering/Camera.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;allegro_flare::placement3d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Shader::ClampedColor&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Shader/ClampedColor.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Rendering::EntityPickingRenderer&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Rendering/EntityPickingRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Entity::Base&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Entity/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::PickingBuffer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/PickingBuffer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_TRANSFORM&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Rendering::TileMapMesh&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Rendering/TileMapMesh.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Rendering/SceneRenderer.q.yml">quintessence/LabyrinthOfLore/Rendering/SceneRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">rendering_surface</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">camera</td>
  <td class="property">LabyrinthOfLore::Rendering::Camera*</td>
</tr>
<tr>
  <td class="property">tile_map_mesh</td>
  <td class="property">LabyrinthOfLore::Rendering::TileMapMesh*</td>
</tr>
<tr>
  <td class="property">tile_map_water_mesh</td>
  <td class="property">LabyrinthOfLore::Rendering::TileMapWaterMesh*</td>
</tr>
<tr>
  <td class="property">entities</td>
  <td class="property">std::vector&lt;LabyrinthOfLore::Entity::Base*&gt;</td>
</tr>
<tr>
  <td class="property">depth_darken_shader</td>
  <td class="property">LabyrinthOfLore::Shader::DepthDarken*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Rendering::Camera&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Rendering/Camera.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Shader::DepthDarken&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Shader/DepthDarken.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Entity::Base&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Entity/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Entity::Base&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Entity/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Rendering::EntityRenderer&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Rendering/EntityRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Rendering::TileMapMesh&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Rendering/TileMapMesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Rendering::TileMapWaterMesh&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Rendering/TileMapWaterMesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;allegro_flare::placement3d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_TRANSFORM&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_clear_to_color&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_bitmap&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::sort&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Rendering/SpritesBillboarder.q.yml">quintessence/LabyrinthOfLore/Rendering/SpritesBillboarder.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">camera</td>
  <td class="property">LabyrinthOfLore::Rendering::Camera</td>
</tr>
<tr>
  <td class="property">entities</td>
  <td class="property">std::vector&lt;LabyrinthOfLore::Entity::Base*&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>process</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Entity::Base&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Entity/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FULL_ROTATION&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec3d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec3d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;allegro_flare::placement3d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;vec3d::placement3d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Rendering::Camera&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Rendering/Camera.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Rendering/TileMapMesh.q.yml">quintessence/LabyrinthOfLore/Rendering/TileMapMesh.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">tile_atlas</td>
  <td class="property">Tileo::TileAtlas*</td>
</tr>
<tr>
  <td class="property">tile_type_dictionary</td>
  <td class="property">LabyrinthOfLore::Rendering::TileTypeDictionary</td>
</tr>
<tr>
  <td class="property">tile_map</td>
  <td class="property">LabyrinthOfLore::WorldMap::TileMap</td>
</tr>
<tr>
  <td class="property">texture</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">offset_to_first_texture_index</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">vertexes</td>
  <td class="property">std::vector&lt;ALLEGRO_VERTEX&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>build</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Rendering::TileMapMeshPillarBuilder&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Rendering/TileMapMeshPillarBuilder.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Rendering::TileMapMeshPillarTexturer&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Rendering/TileMapMeshPillarTexturer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Rendering::TileTypeDictionary&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Rendering/TileTypeDictionary.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_VERTEX&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Random&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Random.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_VERTEX&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::build_vertex&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::cout&quot;, &quot;headers&quot;=&gt;[&quot;iostream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tileo::TileAtlas&quot;, &quot;headers&quot;=&gt;[&quot;Tileo/TileAtlas.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::tile_type_t&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/TileTypeEnum.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Rendering/TileMapMeshCubeBuilder.q.yml">quintessence/LabyrinthOfLore/Rendering/TileMapMeshCubeBuilder.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">x</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">mul</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">ALLEGRO_VERTEX</td>
  <td class="method"><b>buildA</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_VERTEX</td>
  <td class="method"><b>buildB</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_VERTEX</td>
  <td class="method"><b>buildC</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_VERTEX</td>
  <td class="method"><b>buildD</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_VERTEX</td>
  <td class="method"><b>buildE</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_VERTEX</td>
  <td class="method"><b>buildF</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_VERTEX</td>
  <td class="method"><b>buildG</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_VERTEX</td>
  <td class="method"><b>buildH</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_COLOR</td>
  <td class="method"><b>random_color</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;ALLEGRO_VERTEX&gt;</td>
  <td class="method"><b>build_cube</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_VERTEX&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;, &quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Random&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Random.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tileo::TileAtlas&quot;, &quot;headers&quot;=&gt;[&quot;Tileo/TileAtlas.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_VERTEX&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::build_vertex&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Rendering/TileMapMeshCubeTexturer.q.yml">quintessence/LabyrinthOfLore/Rendering/TileMapMeshCubeTexturer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">tile_atlas</td>
  <td class="property">Tileo::TileAtlas*</td>
</tr>
<tr>
  <td class="property">cube_vertexes</td>
  <td class="property">std::vector&lt;ALLEGRO_VERTEX&gt;</td>
</tr>
<tr>
  <td class="property">tile_index_for_front_and_back_texture</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_index_for_right_and_left_texture</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_index_for_top_texture</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::vector&lt;ALLEGRO_VERTEX&gt;</td>
  <td class="method"><b>build_textured_cube</b>(bool scale_for_unit_sized_texture=true)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tileo::TileAtlas&quot;, &quot;headers&quot;=&gt;[&quot;Tileo/TileAtlas.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_VERTEX&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::stringstream&quot;, &quot;headers&quot;=&gt;[&quot;sstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Rendering/TileMapMeshPillarBuilder.q.yml">quintessence/LabyrinthOfLore/Rendering/TileMapMeshPillarBuilder.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">x</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">do_not_include_top_face</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">do_not_include_front_face</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">do_not_include_right_face</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">do_not_include_left_face</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">do_not_include_back_face</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">ALLEGRO_VERTEX</td>
  <td class="method"><b>buildA</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_VERTEX</td>
  <td class="method"><b>buildB</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_VERTEX</td>
  <td class="method"><b>buildC</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_VERTEX</td>
  <td class="method"><b>buildD</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_VERTEX</td>
  <td class="method"><b>buildE</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_VERTEX</td>
  <td class="method"><b>buildF</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_VERTEX</td>
  <td class="method"><b>buildG</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_VERTEX</td>
  <td class="method"><b>buildH</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_VERTEX</td>
  <td class="method"><b>buildA_whole</b>(float height_origin=0.0f)</td>
</tr>
<tr>
  <td class="method">ALLEGRO_VERTEX</td>
  <td class="method"><b>buildB_whole</b>(float height_origin=0.0f)</td>
</tr>
<tr>
  <td class="method">ALLEGRO_VERTEX</td>
  <td class="method"><b>buildC_whole</b>(float height_origin=0.0f)</td>
</tr>
<tr>
  <td class="method">ALLEGRO_VERTEX</td>
  <td class="method"><b>buildD_whole</b>(float height_origin=0.0f)</td>
</tr>
<tr>
  <td class="method">ALLEGRO_VERTEX</td>
  <td class="method"><b>buildE_whole</b>(float height_origin=0.0f)</td>
</tr>
<tr>
  <td class="method">ALLEGRO_VERTEX</td>
  <td class="method"><b>buildF_whole</b>(float height_origin=0.0f)</td>
</tr>
<tr>
  <td class="method">ALLEGRO_VERTEX</td>
  <td class="method"><b>buildG_whole</b>(float height_origin=0.0f)</td>
</tr>
<tr>
  <td class="method">ALLEGRO_VERTEX</td>
  <td class="method"><b>buildH_whole</b>(float height_origin=0.0f)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>needs_partial_height_side_faces_from_top</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>infer_number_of_whole_number_cubes_from_bottom</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_COLOR</td>
  <td class="method"><b>random_color</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;ALLEGRO_VERTEX&gt;</td>
  <td class="method"><b>build_pillar</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_VERTEX&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Random&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Random.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tileo::TileAtlas&quot;, &quot;headers&quot;=&gt;[&quot;Tileo/TileAtlas.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_VERTEX&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::basically_equal&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::build_vertex&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Rendering/TileMapMeshPillarTexturer.q.yml">quintessence/LabyrinthOfLore/Rendering/TileMapMeshPillarTexturer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">tile_atlas</td>
  <td class="property">Tileo::TileAtlas*</td>
</tr>
<tr>
  <td class="property">pillar_vertexes</td>
  <td class="property">std::vector&lt;ALLEGRO_VERTEX&gt;</td>
</tr>
<tr>
  <td class="property">tile_index_for_front_and_back_texture</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_index_for_right_and_left_texture</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_index_for_top_texture</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">needs_partial_height_side_faces_from_top</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">top_face_is_removed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">front_face_is_removed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">right_face_is_removed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">left_face_is_removed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">back_face_is_removed</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>assign_texture_to_face</b>(int this_face_start_index=0, int index_num_for_tile=0, bool needs_partial_height_side_faces_from_top=false)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>infer_number_of_front_right_left_back_sets_of_vertexes</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;ALLEGRO_VERTEX&gt;</td>
  <td class="method"><b>build_textured_pillar</b>(bool scale_for_unit_sized_texture=true)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tileo::TileAtlas&quot;, &quot;headers&quot;=&gt;[&quot;Tileo/TileAtlas.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_VERTEX&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::stringstream&quot;, &quot;headers&quot;=&gt;[&quot;sstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Rendering/TileMapWaterMesh.q.yml">quintessence/LabyrinthOfLore/Rendering/TileMapWaterMesh.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">tile_atlas</td>
  <td class="property">Tileo::TileAtlas*</td>
</tr>
<tr>
  <td class="property">tile_type_dictionary</td>
  <td class="property">LabyrinthOfLore::Rendering::TileTypeDictionary</td>
</tr>
<tr>
  <td class="property">tile_map</td>
  <td class="property">LabyrinthOfLore::WorldMap::TileMap</td>
</tr>
<tr>
  <td class="property">texture</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">__unused_offset_to_first_texture_index</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">vertexes</td>
  <td class="property">std::vector&lt;ALLEGRO_VERTEX&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>build</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Rendering::TileMapMeshPillarBuilder&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Rendering/TileMapMeshPillarBuilder.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Rendering::TileMapMeshPillarTexturer&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Rendering/TileMapMeshPillarTexturer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Rendering::TileTypeDictionary&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Rendering/TileTypeDictionary.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_VERTEX&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Random&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Random.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_VERTEX&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::build_vertex&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::cout&quot;, &quot;headers&quot;=&gt;[&quot;iostream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tileo::TileAtlas&quot;, &quot;headers&quot;=&gt;[&quot;Tileo/TileAtlas.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::tile_type_t&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/TileTypeEnum.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Rendering/TileTypeDefinition.q.yml">quintessence/LabyrinthOfLore/Rendering/TileTypeDefinition.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">tile_index_for_front_and_back_texture</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_index_for_right_and_left_texture</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_index_for_top_texture</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Rendering/TileTypeDictionary.q.yml">quintessence/LabyrinthOfLore/Rendering/TileTypeDictionary.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">definitions</td>
  <td class="property">std::map&lt;int, LabyrinthOfLore::Rendering::TileTypeDefinition&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">LabyrinthOfLore::Rendering::TileTypeDefinition</td>
  <td class="method"><b>find_definition</b>(int tile_type=0)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Rendering::TileTypeDefinition&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Rendering/TileTypeDefinition.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Rendering::TileTypeDefinition&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Rendering/TileTypeDefinition.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Shader/Base.q.yml">quintessence/LabyrinthOfLore/Shader/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">vertex_source_code</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">fragment_source_code</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shaders::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shaders/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Shader/ClampedColor.q.yml">quintessence/LabyrinthOfLore/Shader/ClampedColor.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>deactivate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_clamped_color</b>(ALLEGRO_COLOR clamped_color={})</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>obtain_vertex_source</b>()</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>obtain_fragment_source</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Shader::Base&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Shader/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Shader/DepthDarken.q.yml">quintessence/LabyrinthOfLore/Shader/DepthDarken.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">torch_type</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_torch_type</b>(int type=0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_torch_on</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_torch_off</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>deactivate</b>()</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>obtain_vertex_source</b>()</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>obtain_fragment_source</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Shader::Base&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Shader/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/Shader/FlatColor.q.yml">quintessence/LabyrinthOfLore/Shader/FlatColor.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_flat_color</b>(ALLEGRO_COLOR flat_color={})</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>obtain_vertex_source</b>()</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>obtain_fragment_source</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Shader::Base&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Shader/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/World.q.yml">quintessence/LabyrinthOfLore/World.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">levels</td>
  <td class="property">std::map&lt;std::string, LabyrinthOfLore::WorldMap::Level&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::Level&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/Level.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/WorldMap/BasicRenderer.q.yml">quintessence/LabyrinthOfLore/WorldMap/BasicRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">tile_map</td>
  <td class="property">LabyrinthOfLore::WorldMap::TileMap</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::color::color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::Tile&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/Tile.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_init_primitives_addon&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/WorldMap/BitmapFilenameToWorldBuilder.q.yml">quintessence/LabyrinthOfLore/WorldMap/BitmapFilenameToWorldBuilder.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_source_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">top_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">ground_height</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">LabyrinthOfLore::WorldMap::TileMap</td>
  <td class="method"><b>build</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::BitmapTileMapLoader&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/BitmapTileMapLoader.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::Tile&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/Tile.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::BitmapTileMapLoader&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/BitmapTileMapLoader.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::stringstream&quot;, &quot;headers&quot;=&gt;[&quot;sstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_load_bitmap&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;, &quot;allegro5/allegro_image.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/WorldMap/BitmapTileMapLoader.q.yml">quintessence/LabyrinthOfLore/WorldMap/BitmapTileMapLoader.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">source_bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>colors_are_equal</b>(ALLEGRO_COLOR c1={}, ALLEGRO_COLOR c2={})</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_index_column_x</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>infer_tile_map_width</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>infer_tile_map_height</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_COLOR</td>
  <td class="method"><b>pick_color</b>(int x=0, int y=0)</td>
</tr>
<tr>
  <td class="method">ALLEGRO_COLOR</td>
  <td class="method"><b>pick_index_null_color</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_COLOR</td>
  <td class="method"><b>pick_index_top_color</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_COLOR</td>
  <td class="method"><b>pick_index_ground_color</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_COLOR</td>
  <td class="method"><b>pick_index_gp_color</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_COLOR</td>
  <td class="method"><b>pick_index_gpp_color</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_COLOR</td>
  <td class="method"><b>pick_index_gppp_color</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_COLOR</td>
  <td class="method"><b>pick_index_g1_color</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_COLOR</td>
  <td class="method"><b>pick_index_gm_color</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_COLOR</td>
  <td class="method"><b>pick_index_gmm_color</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_COLOR</td>
  <td class="method"><b>pick_index_gmmm_color</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_COLOR</td>
  <td class="method"><b>pick_index_gm1_color</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_COLOR</td>
  <td class="method"><b>pick_index_g1p_color</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_COLOR</td>
  <td class="method"><b>pick_index_g1pp_color</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_COLOR</td>
  <td class="method"><b>pick_index_g1ppp_color</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_COLOR</td>
  <td class="method"><b>pick_index_g2_color</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>validate</b>()</td>
</tr>
<tr>
  <td class="method">LabyrinthOfLore::WorldMap::TileMap</td>
  <td class="method"><b>load</b>(float top_height=4.0f, float ground_height=2.0f)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::stringstream&quot;, &quot;headers&quot;=&gt;[&quot;sstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/TileMap.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/WorldMap/Door.q.yml">quintessence/LabyrinthOfLore/WorldMap/Door.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">level_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">spawn_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">spawn_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">spawn_z</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">spawn_facing_yaw</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/WorldMap/Level.q.yml">quintessence/LabyrinthOfLore/WorldMap/Level.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">heading</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">ground_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">tile_map</td>
  <td class="property">LabyrinthOfLore::WorldMap::TileMap</td>
</tr>
<tr>
  <td class="property">tile_map_mesh</td>
  <td class="property">LabyrinthOfLore::Rendering::TileMapMesh</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Rendering::TileMapMesh&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Rendering/TileMapMesh.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/WorldMap/MultiBitmapFilenameToWorldBuilder.q.yml">quintessence/LabyrinthOfLore/WorldMap/MultiBitmapFilenameToWorldBuilder.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">elevation_bitmap_source_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">tile_type_bitmap_source_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">top_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">ground_height</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">LabyrinthOfLore::WorldMap::TileMap</td>
  <td class="method"><b>build</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::BitmapTileMapLoader&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/BitmapTileMapLoader.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::MultiBitmapTileMapLoader&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/MultiBitmapTileMapLoader.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::Tile&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/Tile.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::stringstream&quot;, &quot;headers&quot;=&gt;[&quot;sstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_load_bitmap&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;, &quot;allegro5/allegro_image.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/WorldMap/MultiBitmapTileMapLoader.q.yml">quintessence/LabyrinthOfLore/WorldMap/MultiBitmapTileMapLoader.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">tile_map</td>
  <td class="property">LabyrinthOfLore::WorldMap::TileMap*</td>
</tr>
<tr>
  <td class="property">source_bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>colors_are_equal</b>(ALLEGRO_COLOR c1={}, ALLEGRO_COLOR c2={})</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_index_column_x</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>infer_tile_map_width</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>infer_tile_map_height</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_COLOR</td>
  <td class="method"><b>pick_color</b>(int x=0, int y=0)</td>
</tr>
<tr>
  <td class="method">ALLEGRO_COLOR</td>
  <td class="method"><b>pick_index_null_color</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_COLOR</td>
  <td class="method"><b>pick_door_color</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_COLOR</td>
  <td class="method"><b>pick_water_color</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_COLOR</td>
  <td class="method"><b>pick_lava_color</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_COLOR</td>
  <td class="method"><b>pick_glow_water_color</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>validate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>load_and_process</b>(float top_height=4.0f, float ground_height=2.0f)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::stringstream&quot;, &quot;headers&quot;=&gt;[&quot;sstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::tile_type_t&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/TileTypeEnum.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/WorldMap/PixelRenderer.q.yml">quintessence/LabyrinthOfLore/WorldMap/PixelRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">tile_map</td>
  <td class="property">LabyrinthOfLore::WorldMap::TileMap</td>
</tr>
<tr>
  <td class="property">tile_type_dictionary</td>
  <td class="property">LabyrinthOfLore::Rendering::TileTypeDictionary</td>
</tr>
<tr>
  <td class="property">ground_level</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_BITMAP*</td>
  <td class="method"><b>create_render</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::color::color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::Tile&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/Tile.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Rendering::TileTypeDictionary&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Rendering/TileTypeDictionary.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_init_primitives_addon&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/WorldMap/Tile.q.yml">quintessence/LabyrinthOfLore/WorldMap/Tile.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>run</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/WorldMap/TileMapLoader.q.yml">quintessence/LabyrinthOfLore/WorldMap/TileMapLoader.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">tile_map_data</td>
  <td class="property">std::vector&lt;std::vector&lt;LabyrinthOfLore::WorldMap::Tile&gt;&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>validate_size_and_integrity</b>()</td>
</tr>
<tr>
  <td class="method">LabyrinthOfLore::WorldMap::TileMap</td>
  <td class="method"><b>build_tile_map</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::Tile&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/Tile.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLore/WorldMap/Zone.q.yml">quintessence/LabyrinthOfLore/WorldMap/Zone.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">x1</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y1</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">z1</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">x2</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y2</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">z2</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>collides</b>(AllegroFlare::vec3d point={})</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec3d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLoreGame/Classic.q.yml">quintessence/LabyrinthOfLoreGame/Classic.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">clamped_color_shader</td>
  <td class="property">LabyrinthOfLore::Shader::ClampedColor</td>
</tr>
<tr>
  <td class="property">depth_darken_shader</td>
  <td class="property">LabyrinthOfLore::Shader::DepthDarken</td>
</tr>
<tr>
  <td class="property">item_tile_atlas</td>
  <td class="property">Tileo::TileAtlas</td>
</tr>
<tr>
  <td class="property">character_tile_atlas</td>
  <td class="property">Tileo::TileAtlas</td>
</tr>
<tr>
  <td class="property">world_texture_tile_atlas</td>
  <td class="property">Tileo::TileAtlas</td>
</tr>
<tr>
  <td class="property">levels</td>
  <td class="property">std::map&lt;std::string, LabyrinthOfLore::WorldMap::Level&gt;</td>
</tr>
<tr>
  <td class="property">meshes</td>
  <td class="property">std::map&lt;std::string, LabyrinthOfLore::Rendering::TileMapMesh&gt;</td>
</tr>
<tr>
  <td class="property">water_meshes</td>
  <td class="property">std::map&lt;std::string, LabyrinthOfLore::Rendering::TileMapWaterMesh&gt;</td>
</tr>
<tr>
  <td class="property">doors</td>
  <td class="property">std::map&lt;char, LabyrinthOfLore::WorldMap::Door&gt;</td>
</tr>
<tr>
  <td class="property">thing_dictionary</td>
  <td class="property">LabyrinthOfLore::Entity::ThingDictionary</td>
</tr>
<tr>
  <td class="property">all_entities</td>
  <td class="property">std::vector&lt;LabyrinthOfLore::Entity::Base*&gt;</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_bitmap_bin</b>(AllegroFlare::BitmapBin* bitmap_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>add_thing_to_world</b>(std::vector&lt;LabyrinthOfLore::Entity::Base*&gt;* all_entities={}, LabyrinthOfLore::Entity::ThingDictionary* thing_dictionary=nullptr, int thing_id=0, std::string level_identifier=&quot;&quot;, AllegroFlare::vec3d position={}, bool billboard_at_camera=true, bool can_be_picked_up=true, bool must_be_picked_up_to_be_used=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Shader::ClampedColor&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Shader/ClampedColor.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Shader::DepthDarken&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Shader/DepthDarken.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec3d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tileo::TileAtlas&quot;, &quot;headers&quot;=&gt;[&quot;Tileo/TileAtlas.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::Level&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/Level.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::MultiBitmapFilenameToWorldBuilder&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/MultiBitmapFilenameToWorldBuilder.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLoreGame::LevelIdentifiers&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLoreGame/LevelIdentifiers.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Rendering::TileTypeDictionary&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Rendering/TileTypeDictionary.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::TileTypeEnum&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/TileTypeEnum.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLoreGame::ItemIdEnums&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLoreGame/ItemIdEnums.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Rendering::TileMapMesh&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Rendering/TileMapMesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Rendering::TileMapWaterMesh&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Rendering/TileMapWaterMesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::WorldMap::Door&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/WorldMap/Door.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Entity::ThingDictionary&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Entity/ThingDictionary.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Entity::Base&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Entity/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLoreGame/Interactions.q.yml">quintessence/LabyrinthOfLoreGame/Interactions.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">thing_definition_factory</td>
  <td class="property">LabyrinthOfLoreGame::ThingDefinitionFactory*</td>
</tr>
<tr>
  <td class="property">all_entities</td>
  <td class="property">std::vector&lt;LabyrinthOfLore::Entity::Base*&gt;*</td>
</tr>
<tr>
  <td class="property">thing_dictionary</td>
  <td class="property">LabyrinthOfLore::Entity::ThingDictionary*</td>
</tr>
<tr>
  <td class="property">message_scroll</td>
  <td class="property">LabyrinthOfLore::Hud::MessageScroll*</td>
</tr>
<tr>
  <td class="property">character_panel</td>
  <td class="property">LabyrinthOfLore::Hud::CharacterPanel*</td>
</tr>
<tr>
  <td class="property">player_inventory</td>
  <td class="property">AllegroFlare::Inventory*</td>
</tr>
<tr>
  <td class="property">time_now</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>validate_arguments</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>you_have_received_the_</b>(int thing_id={})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>character_speaks</b>(std::string message=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>append_message</b>(std::string message=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>player_has_item</b>(int item_id=-1)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_player_inventory_count_of_type</b>(thing_type_t thing_type=THING_TYPE_UNDEFINED)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>player_has_thing_of_type</b>(thing_type_t thing_type=THING_TYPE_UNDEFINED)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>process_use</b>(float time_now=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>process_use</b>(int thing_being_used_by_player_from_inventory=-1, int thing_being_used_on=0, float time_now=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>process_talk</b>(int thing_id=0)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Entity::Base&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Entity/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Entity::ThingDictionary&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Entity/ThingDictionary.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Hud::MessageScroll&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Hud/MessageScroll.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Hud::CharacterPanel&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Hud/CharacterPanel.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Inventory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Inventory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLoreGame::ItemIdEnums&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLoreGame/ItemIdEnums.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::stringstream&quot;, &quot;headers&quot;=&gt;[&quot;sstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLore::Entity::ThingDefinition&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLore/Entity/ThingDefinition.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;LabyrinthOfLoreGame::ThingDefinitionFactory&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLoreGame/ThingDefinitionFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;thing_type_t&quot;, &quot;headers&quot;=&gt;[&quot;LabyrinthOfLoreGame/ItemIdEnums.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/LabyrinthOfLoreGame/ThingDefinitionFactory.q.yml">quintessence/LabyrinthOfLoreGame/ThingDefinitionFactory.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>run</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Tileo/TileIndexInfo.q.yml">quintessence/Tileo/TileIndexInfo.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">index_num</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">bitmap_source</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">sub_bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">u1</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">v1</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">u2</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">v2</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<h1>Dependents</h1>
<pre>
{
  "LabyrinthOfLore/Hud/MessageScroll": [
    ".removed/LabyrinthOfLore/Rendering/Hud/MessageScrollRenderer",
    "LabyrinthOfLore/Rendering/Hud/MessageScrollRenderer",
    "LabyrinthOfLore/Rendering/Hud/Renderer",
    "LabyrinthOfLoreGame/Interactions"
  ],
  "ALLEGRO_COLOR": [
    ".removed/LabyrinthOfLore/Rendering/Hud/MessageScrollRenderer",
    "LabyrinthOfLore/Rendering/Hud/MessageScrollRenderer",
    "LabyrinthOfLore/Rendering/TileMapMesh",
    "LabyrinthOfLore/Rendering/TileMapMeshCubeBuilder",
    "LabyrinthOfLore/Rendering/TileMapMeshPillarBuilder",
    "LabyrinthOfLore/Rendering/TileMapWaterMesh",
    "LabyrinthOfLore/Shader/ClampedColor",
    "LabyrinthOfLore/Shader/DepthDarken",
    "LabyrinthOfLore/Shader/FlatColor",
    "LabyrinthOfLore/WorldMap/BitmapTileMapLoader",
    "LabyrinthOfLore/WorldMap/MultiBitmapTileMapLoader"
  ],
  "ALLEGRO_FONT": [
    ".removed/LabyrinthOfLore/Rendering/Hud/MessageScrollRenderer",
    "LabyrinthOfLore/Rendering/Hud/CharacterPanelRenderer",
    "LabyrinthOfLore/Rendering/Hud/CommandPanelRenderer",
    "LabyrinthOfLore/Rendering/Hud/CommandsHintPaneRenderer",
    "LabyrinthOfLore/Rendering/Hud/CompassRenderer",
    "LabyrinthOfLore/Rendering/Hud/CurrentSpellsRenderer",
    "LabyrinthOfLore/Rendering/Hud/MapButtonRenderer",
    "LabyrinthOfLore/Rendering/Hud/MessageScrollRenderer",
    "LabyrinthOfLore/Rendering/Hud/Renderer",
    "LabyrinthOfLore/Rendering/Hud/RotateCharacterPanelButtonRenderer",
    "LabyrinthOfLore/Rendering/Hud/RuneShelfRenderer",
    "LabyrinthOfLore/Rendering/Hud/TitleTextRenderer",
    "LabyrinthOfLore/Rendering/Hud/ViewFrameRenderer",
    "LabyrinthOfLore/Rendering/Hud/VitalityAndManaBarRenderer"
  ],
  "al_color_name": [
    ".removed/LabyrinthOfLore/Rendering/Hud/MessageScrollRenderer",
    "LabyrinthOfLore/Rendering/Hud/CharacterPanelRenderer",
    "LabyrinthOfLore/Rendering/Hud/CommandPanelRenderer",
    "LabyrinthOfLore/Rendering/Hud/CommandsHintPaneRenderer",
    "LabyrinthOfLore/Rendering/Hud/CompassRenderer",
    "LabyrinthOfLore/Rendering/Hud/CurrentSpellsRenderer",
    "LabyrinthOfLore/Rendering/Hud/MapButtonRenderer",
    "LabyrinthOfLore/Rendering/Hud/MessageScrollRenderer",
    "LabyrinthOfLore/Rendering/Hud/Renderer",
    "LabyrinthOfLore/Rendering/Hud/RotateCharacterPanelButtonRenderer",
    "LabyrinthOfLore/Rendering/Hud/RuneShelfRenderer",
    "LabyrinthOfLore/Rendering/Hud/TitleTextRenderer",
    "LabyrinthOfLore/Rendering/Hud/ViewFrameRenderer",
    "LabyrinthOfLore/Rendering/Hud/VitalityAndManaBarRenderer",
    "LabyrinthOfLore/Rendering/MousePointer",
    "LabyrinthOfLore/Rendering/SceneRenderer",
    "LabyrinthOfLore/Rendering/TileMapMesh",
    "LabyrinthOfLore/Rendering/TileMapMeshCubeBuilder",
    "LabyrinthOfLore/Rendering/TileMapMeshCubeTexturer",
    "LabyrinthOfLore/Rendering/TileMapMeshPillarBuilder",
    "LabyrinthOfLore/Rendering/TileMapMeshPillarTexturer",
    "LabyrinthOfLore/Rendering/TileMapWaterMesh",
    "LabyrinthOfLore/WorldMap/BasicRenderer",
    "LabyrinthOfLore/WorldMap/PixelRenderer"
  ],
  "al_draw_rounded_rectangle": [
    ".removed/LabyrinthOfLore/Rendering/Hud/MessageScrollRenderer",
    "LabyrinthOfLore/Rendering/Hud/CharacterPanelRenderer",
    "LabyrinthOfLore/Rendering/Hud/CommandPanelRenderer",
    "LabyrinthOfLore/Rendering/Hud/CommandsHintPaneRenderer",
    "LabyrinthOfLore/Rendering/Hud/CompassRenderer",
    "LabyrinthOfLore/Rendering/Hud/CurrentSpellsRenderer",
    "LabyrinthOfLore/Rendering/Hud/MapButtonRenderer",
    "LabyrinthOfLore/Rendering/Hud/MessageScrollRenderer",
    "LabyrinthOfLore/Rendering/Hud/RotateCharacterPanelButtonRenderer",
    "LabyrinthOfLore/Rendering/Hud/RuneShelfRenderer",
    "LabyrinthOfLore/Rendering/Hud/TitleTextRenderer",
    "LabyrinthOfLore/Rendering/Hud/ViewFrameRenderer",
    "LabyrinthOfLore/Rendering/Hud/VitalityAndManaBarRenderer"
  ],
  "allegro_flare/placement3d": [
    ".removed/LabyrinthOfLore/Rendering/Hud/MessageScrollRenderer",
    "LabyrinthOfLore/Entity/Base",
    "LabyrinthOfLore/Rendering/Camera",
    "LabyrinthOfLore/Rendering/Hud/CharacterPanelRenderer",
    "LabyrinthOfLore/Rendering/Hud/CommandPanelRenderer",
    "LabyrinthOfLore/Rendering/Hud/CommandsHintPaneRenderer",
    "LabyrinthOfLore/Rendering/Hud/CompassRenderer",
    "LabyrinthOfLore/Rendering/Hud/CurrentSpellsRenderer",
    "LabyrinthOfLore/Rendering/Hud/MapButtonRenderer",
    "LabyrinthOfLore/Rendering/Hud/MessageScrollRenderer",
    "LabyrinthOfLore/Rendering/Hud/Renderer",
    "LabyrinthOfLore/Rendering/Hud/RotateCharacterPanelButtonRenderer",
    "LabyrinthOfLore/Rendering/Hud/RuneShelfRenderer",
    "LabyrinthOfLore/Rendering/Hud/TitleTextRenderer",
    "LabyrinthOfLore/Rendering/Hud/ViewFrameRenderer",
    "LabyrinthOfLore/Rendering/Hud/VitalityAndManaBarRenderer",
    "LabyrinthOfLore/Rendering/PickingBufferRenderer",
    "LabyrinthOfLore/Rendering/SceneRenderer",
    "LabyrinthOfLore/Rendering/SpritesBillboarder"
  ],
  "x": [
    ".removed/LabyrinthOfLore/Rendering/Hud/MessageScrollRenderer",
    "LabyrinthOfLore/Rendering/Hud/CharacterPanelRenderer",
    "LabyrinthOfLore/Rendering/Hud/CommandPanelRenderer",
    "LabyrinthOfLore/Rendering/Hud/CommandsHintPaneRenderer",
    "LabyrinthOfLore/Rendering/Hud/CompassRenderer",
    "LabyrinthOfLore/Rendering/Hud/CurrentSpellsRenderer",
    "LabyrinthOfLore/Rendering/Hud/MapButtonRenderer",
    "LabyrinthOfLore/Rendering/Hud/RotateCharacterPanelButtonRenderer",
    "LabyrinthOfLore/Rendering/Hud/RuneShelfRenderer",
    "LabyrinthOfLore/Rendering/Hud/TitleTextRenderer",
    "LabyrinthOfLore/Rendering/Hud/ViewFrameRenderer",
    "LabyrinthOfLore/Rendering/Hud/VitalityAndManaBarRenderer"
  ],
  "std/vector<std/tuple<float, std/string, int>>": [
    ".removed/LabyrinthOfLore/Rendering/Hud/MessageScrollRenderer",
    "LabyrinthOfLore/Hud/MessageScroll"
  ],
  "void": [
    ".removed/LabyrinthOfLore/Rendering/Hud/MessageScrollRenderer"
  ],
  "const char": [
    ".removed/LabyrinthOfLore/Rendering/Hud/MessageScrollRenderer"
  ],
  "AllegroFlare/clamp": [
    ".removed/LabyrinthOfLore/Rendering/Hud/MessageScrollRenderer",
    "LabyrinthOfLore/Rendering/Hud/MessageScrollRenderer",
    "LabyrinthOfLore/Rendering/Hud/TitleTextRenderer"
  ],
  "AllegroFlare/ElementID": [
    "LabyrinthOfLore/Entity/Base"
  ],
  "AllegroFlare/Model3D": [
    "LabyrinthOfLore/Entity/Base"
  ],
  "ALLEGRO_BITMAP": [
    "LabyrinthOfLore/Entity/Base",
    "LabyrinthOfLore/Rendering/Camera",
    "LabyrinthOfLore/Rendering/Hud/Renderer",
    "LabyrinthOfLore/Rendering/PickingBufferRenderer",
    "LabyrinthOfLore/Rendering/SceneRenderer",
    "LabyrinthOfLore/Rendering/TileMapMesh",
    "LabyrinthOfLore/Rendering/TileMapWaterMesh",
    "LabyrinthOfLore/WorldMap/BitmapTileMapLoader",
    "LabyrinthOfLore/WorldMap/MultiBitmapTileMapLoader",
    "LabyrinthOfLore/WorldMap/PixelRenderer",
    "Tileo/TileIndexInfo"
  ],
  "LabyrinthOfLore/Entity/Base": [
    "LabyrinthOfLore/Entity/Cleanup",
    "LabyrinthOfLore/Entity/Selector",
    "LabyrinthOfLore/Physics/EntityTileMapCollisionEvent",
    "LabyrinthOfLore/Physics/EntityTileMapCollisionStepper",
    "LabyrinthOfLore/Physics/EntityZoneCollisionEvent",
    "LabyrinthOfLore/Physics/EntityZoneCollisionObserver",
    "LabyrinthOfLore/Physics/GravityStepper",
    "LabyrinthOfLore/Rendering/EntityPickingRenderer",
    "LabyrinthOfLore/Rendering/EntityRenderer",
    "LabyrinthOfLore/Rendering/PickingBufferRenderer",
    "LabyrinthOfLore/Rendering/SceneRenderer",
    "LabyrinthOfLore/Rendering/SceneRenderer",
    "LabyrinthOfLore/Rendering/SpritesBillboarder",
    "LabyrinthOfLoreGame/Classic",
    "LabyrinthOfLoreGame/Interactions"
  ],
  "std/stringstream": [
    "LabyrinthOfLore/Entity/ThingDefinition",
    "LabyrinthOfLore/Rendering/TileMapMeshCubeTexturer",
    "LabyrinthOfLore/Rendering/TileMapMeshPillarTexturer",
    "LabyrinthOfLore/WorldMap/BitmapFilenameToWorldBuilder",
    "LabyrinthOfLore/WorldMap/BitmapTileMapLoader",
    "LabyrinthOfLore/WorldMap/MultiBitmapFilenameToWorldBuilder",
    "LabyrinthOfLore/WorldMap/MultiBitmapTileMapLoader",
    "LabyrinthOfLoreGame/Interactions"
  ],
  "Tileo/TileAtlas": [
    "LabyrinthOfLore/Entity/ThingDefinition",
    "LabyrinthOfLore/Rendering/TileMapMesh",
    "LabyrinthOfLore/Rendering/TileMapMeshCubeBuilder",
    "LabyrinthOfLore/Rendering/TileMapMeshCubeTexturer",
    "LabyrinthOfLore/Rendering/TileMapMeshPillarBuilder",
    "LabyrinthOfLore/Rendering/TileMapMeshPillarTexturer",
    "LabyrinthOfLore/Rendering/TileMapWaterMesh",
    "LabyrinthOfLoreGame/Classic"
  ],
  "thing_type_t": [
    "LabyrinthOfLore/Entity/ThingDefinition",
    "LabyrinthOfLore/Hud/CharacterPanel",
    "LabyrinthOfLoreGame/Interactions"
  ],
  "LabyrinthOfLore/Entity/ThingDefinition": [
    "LabyrinthOfLore/Entity/ThingDictionary",
    "LabyrinthOfLoreGame/Interactions"
  ],
  "LabyrinthOfLore/Entity/ThingDefinition&": [
    "LabyrinthOfLore/Entity/ThingDictionary"
  ],
  "std/map<int, LabyrinthOfLore/Entity/ThingDefinition>": [
    "LabyrinthOfLore/Entity/ThingDictionary"
  ],
  "std/max": [
    "LabyrinthOfLore/Entity/ThingDictionary",
    "LabyrinthOfLore/Physics/EntityTileMapCollisionStepper"
  ],
  "ALLEGRO_DISPLAY": [
    "LabyrinthOfLore/Gameplay/Screen"
  ],
  "ALLEGRO_EVENT": [
    "LabyrinthOfLore/Gameplay/Screen"
  ],
  "AllegroFlare/Screens/Base": [
    "LabyrinthOfLore/Gameplay/Screen"
  ],
  "AllegroFlare/BitmapBin": [
    "LabyrinthOfLore/Gameplay/Screen",
    "LabyrinthOfLoreGame/Classic"
  ],
  "AllegroFlare/EventEmitter": [
    "LabyrinthOfLore/Gameplay/Screen"
  ],
  "AllegroFlare/FontBin": [
    "LabyrinthOfLore/Gameplay/Screen",
    "LabyrinthOfLore/Rendering/Hud/Renderer"
  ],
  "AllegroFlare/ModelBin": [
    "LabyrinthOfLore/Gameplay/Screen"
  ],
  "AllegroFlare/Profiler": [
    "LabyrinthOfLore/Gameplay/Screen"
  ],
  "al_is_primitives_addon_initialized": [
    "LabyrinthOfLore/Gameplay/Screen"
  ],
  "AllegroFlare/Player": [
    "LabyrinthOfLore/Gameplay/Screen"
  ],
  "AllegroFlare/VirtualControllers/Base": [
    "LabyrinthOfLore/Gameplay/Screen"
  ],
  "LabyrinthOfLore/Gameplay/Gameplay": [
    "LabyrinthOfLore/Gameplay/Screen"
  ],
  "AllegroFlare/Inventory": [
    "LabyrinthOfLore/Hud/CharacterPanel",
    "LabyrinthOfLoreGame/Interactions"
  ],
  "LabyrinthOfLore/Entity/ThingDictionary": [
    "LabyrinthOfLore/Hud/CharacterPanel",
    "LabyrinthOfLoreGame/Classic",
    "LabyrinthOfLoreGame/Interactions"
  ],
  "std/vector": [
    "LabyrinthOfLore/Hud/CharacterPanel"
  ],
  "std/vector<int>": [
    "LabyrinthOfLore/Hud/CharacterPanel"
  ],
  "std/map<thing_type_t, int>": [
    "LabyrinthOfLore/Hud/CharacterPanel"
  ],
  "LabyrinthOfLore/Hud/command_mode_t": [
    "LabyrinthOfLore/Hud/CommandPanel",
    "LabyrinthOfLore/Rendering/Hud/CommandPanelRenderer"
  ],
  "LabyrinthOfLore/WorldMap/tile_face_t": [
    "LabyrinthOfLore/Physics/EntityTileMapCollisionEvent",
    "LabyrinthOfLore/Physics/EntityTileMapCollisionStepper"
  ],
  "LabyrinthOfLore/WorldMap/TileMap": [
    "LabyrinthOfLore/Physics/EntityTileMapCollisionStepper",
    "LabyrinthOfLore/Rendering/TileMapMesh",
    "LabyrinthOfLore/Rendering/TileMapWaterMesh",
    "LabyrinthOfLore/WorldMap/BasicRenderer",
    "LabyrinthOfLore/WorldMap/BitmapFilenameToWorldBuilder",
    "LabyrinthOfLore/WorldMap/BitmapTileMapLoader",
    "LabyrinthOfLore/WorldMap/Level",
    "LabyrinthOfLore/WorldMap/MultiBitmapFilenameToWorldBuilder",
    "LabyrinthOfLore/WorldMap/MultiBitmapTileMapLoader",
    "LabyrinthOfLore/WorldMap/PixelRenderer",
    "LabyrinthOfLore/WorldMap/TileMapLoader"
  ],
  "fabs": [
    "LabyrinthOfLore/Physics/EntityTileMapCollisionStepper"
  ],
  "std/min": [
    "LabyrinthOfLore/Physics/EntityTileMapCollisionStepper"
  ],
  "LabyrinthOfLore/Physics/EntityTileMapCollisionEvent": [
    "LabyrinthOfLore/Physics/EntityTileMapCollisionStepper",
    "LabyrinthOfLore/Physics/EntityTileMapCollisionStepper"
  ],
  "LabyrinthOfLore/Physics/zone_collision_event_t": [
    "LabyrinthOfLore/Physics/EntityZoneCollisionEvent"
  ],
  "LabyrinthOfLore/WorldMap/Zone": [
    "LabyrinthOfLore/Physics/EntityZoneCollisionObserver"
  ],
  "std/set_difference": [
    "LabyrinthOfLore/Physics/EntityZoneCollisionObserver"
  ],
  "AllegroFlare/vec3d": [
    "LabyrinthOfLore/Physics/GravityStepper",
    "LabyrinthOfLore/Rendering/Camera",
    "LabyrinthOfLore/Rendering/SpritesBillboarder",
    "LabyrinthOfLore/Rendering/SpritesBillboarder",
    "LabyrinthOfLore/WorldMap/Zone",
    "LabyrinthOfLoreGame/Classic"
  ],
  "ALLEGRO_TRANSFORM": [
    "LabyrinthOfLore/Rendering/Camera",
    "LabyrinthOfLore/Rendering/PickingBufferRenderer",
    "LabyrinthOfLore/Rendering/SceneRenderer"
  ],
  "AllegroFlare/TAU": [
    "LabyrinthOfLore/Rendering/Camera"
  ],
  "tan": [
    "LabyrinthOfLore/Rendering/Camera"
  ],
  "LabyrinthOfLore/Shader/ClampedColor": [
    "LabyrinthOfLore/Rendering/EntityPickingRenderer",
    "LabyrinthOfLore/Rendering/PickingBufferRenderer",
    "LabyrinthOfLoreGame/Classic"
  ],
  "AllegroFlare/ColorIDConverter": [
    "LabyrinthOfLore/Rendering/EntityPickingRenderer"
  ],
  "LabyrinthOfLore/Hud/CharacterPanel": [
    "LabyrinthOfLore/Rendering/Hud/CharacterPanelRenderer",
    "LabyrinthOfLore/Rendering/Hud/Renderer",
    "LabyrinthOfLoreGame/Interactions"
  ],
  "LabyrinthOfLore/Hud/CommandPanel": [
    "LabyrinthOfLore/Rendering/Hud/CommandPanelRenderer",
    "LabyrinthOfLore/Rendering/Hud/Renderer"
  ],
  "LabyrinthOfLore/Hud/CommandsHintPane": [
    "LabyrinthOfLore/Rendering/Hud/CommandsHintPaneRenderer",
    "LabyrinthOfLore/Rendering/Hud/Renderer"
  ],
  "LabyrinthOfLore/Hud/Compass": [
    "LabyrinthOfLore/Rendering/Hud/CompassRenderer",
    "LabyrinthOfLore/Rendering/Hud/Renderer"
  ],
  "LabyrinthOfLore/Hud/CurrentSpells": [
    "LabyrinthOfLore/Rendering/Hud/CurrentSpellsRenderer",
    "LabyrinthOfLore/Rendering/Hud/Renderer"
  ],
  "LabyrinthOfLore/Hud/MapButton": [
    "LabyrinthOfLore/Rendering/Hud/MapButtonRenderer",
    "LabyrinthOfLore/Rendering/Hud/Renderer"
  ],
  "LabyrinthOfLore/Hud/VitalityAndManaBar": [
    "LabyrinthOfLore/Rendering/Hud/Renderer",
    "LabyrinthOfLore/Rendering/Hud/VitalityAndManaBarRenderer"
  ],
  "LabyrinthOfLore/Rendering/Hud/VitalityAndManaBarRenderer": [
    "LabyrinthOfLore/Rendering/Hud/Renderer"
  ],
  "LabyrinthOfLore/Rendering/Hud/CommandPanelRenderer": [
    "LabyrinthOfLore/Rendering/Hud/Renderer"
  ],
  "LabyrinthOfLore/Rendering/Hud/CharacterPanelRenderer": [
    "LabyrinthOfLore/Rendering/Hud/Renderer"
  ],
  "LabyrinthOfLore/Rendering/Hud/MessageScrollRenderer": [
    "LabyrinthOfLore/Rendering/Hud/Renderer"
  ],
  "LabyrinthOfLore/Rendering/Hud/MapButtonRenderer": [
    "LabyrinthOfLore/Rendering/Hud/Renderer"
  ],
  "LabyrinthOfLore/Hud/RuneShelf": [
    "LabyrinthOfLore/Rendering/Hud/Renderer",
    "LabyrinthOfLore/Rendering/Hud/RuneShelfRenderer"
  ],
  "LabyrinthOfLore/Rendering/Hud/RuneShelfRenderer": [
    "LabyrinthOfLore/Rendering/Hud/Renderer"
  ],
  "LabyrinthOfLore/Rendering/Hud/CompassRenderer": [
    "LabyrinthOfLore/Rendering/Hud/Renderer"
  ],
  "LabyrinthOfLore/Hud/RotateCharacterPanelButton": [
    "LabyrinthOfLore/Rendering/Hud/Renderer",
    "LabyrinthOfLore/Rendering/Hud/RotateCharacterPanelButtonRenderer"
  ],
  "LabyrinthOfLore/Rendering/Hud/RotateCharacterPanelButtonRenderer": [
    "LabyrinthOfLore/Rendering/Hud/Renderer"
  ],
  "LabyrinthOfLore/Rendering/Hud/CommandsHintPaneRenderer": [
    "LabyrinthOfLore/Rendering/Hud/Renderer"
  ],
  "LabyrinthOfLore/Rendering/Hud/CurrentSpellsRenderer": [
    "LabyrinthOfLore/Rendering/Hud/Renderer"
  ],
  "LabyrinthOfLore/Hud/ViewFrame": [
    "LabyrinthOfLore/Rendering/Hud/Renderer",
    "LabyrinthOfLore/Rendering/Hud/ViewFrameRenderer"
  ],
  "LabyrinthOfLore/Rendering/Hud/ViewFrameRenderer": [
    "LabyrinthOfLore/Rendering/Hud/Renderer"
  ],
  "LabyrinthOfLore/Hud/TitleText": [
    "LabyrinthOfLore/Rendering/Hud/Renderer",
    "LabyrinthOfLore/Rendering/Hud/TitleTextRenderer"
  ],
  "LabyrinthOfLore/Rendering/Hud/TitleTextRenderer": [
    "LabyrinthOfLore/Rendering/Hud/Renderer"
  ],
  "LabyrinthOfLore/Rendering/MousePointer": [
    "LabyrinthOfLore/Rendering/Hud/Renderer"
  ],
  "std/runtime_error": [
    "LabyrinthOfLore/Rendering/Hud/Renderer"
  ],
  "al_get_time": [
    "LabyrinthOfLore/Rendering/Hud/TitleTextRenderer"
  ],
  "al_draw_filled_rectangle": [
    "LabyrinthOfLore/Rendering/MousePointer",
    "LabyrinthOfLore/WorldMap/BasicRenderer",
    "LabyrinthOfLore/WorldMap/PixelRenderer"
  ],
  "LabyrinthOfLore/Rendering/Camera": [
    "LabyrinthOfLore/Rendering/PickingBufferRenderer",
    "LabyrinthOfLore/Rendering/SceneRenderer",
    "LabyrinthOfLore/Rendering/SpritesBillboarder"
  ],
  "LabyrinthOfLore/Rendering/EntityPickingRenderer": [
    "LabyrinthOfLore/Rendering/PickingBufferRenderer"
  ],
  "AllegroFlare/PickingBuffer": [
    "LabyrinthOfLore/Rendering/PickingBufferRenderer"
  ],
  "LabyrinthOfLore/Rendering/TileMapMesh": [
    "LabyrinthOfLore/Rendering/PickingBufferRenderer",
    "LabyrinthOfLore/Rendering/SceneRenderer",
    "LabyrinthOfLore/WorldMap/Level",
    "LabyrinthOfLoreGame/Classic"
  ],
  "LabyrinthOfLore/Shader/DepthDarken": [
    "LabyrinthOfLore/Rendering/SceneRenderer",
    "LabyrinthOfLoreGame/Classic"
  ],
  "LabyrinthOfLore/Rendering/EntityRenderer": [
    "LabyrinthOfLore/Rendering/SceneRenderer"
  ],
  "LabyrinthOfLore/Rendering/TileMapWaterMesh": [
    "LabyrinthOfLore/Rendering/SceneRenderer",
    "LabyrinthOfLoreGame/Classic"
  ],
  "al_clear_to_color": [
    "LabyrinthOfLore/Rendering/SceneRenderer"
  ],
  "al_draw_bitmap": [
    "LabyrinthOfLore/Rendering/SceneRenderer"
  ],
  "std/sort": [
    "LabyrinthOfLore/Rendering/SceneRenderer"
  ],
  "AllegroFlare/FULL_ROTATION": [
    "LabyrinthOfLore/Rendering/SpritesBillboarder"
  ],
  "vec3d/placement3d": [
    "LabyrinthOfLore/Rendering/SpritesBillboarder"
  ],
  "LabyrinthOfLore/Rendering/TileMapMeshPillarBuilder": [
    "LabyrinthOfLore/Rendering/TileMapMesh",
    "LabyrinthOfLore/Rendering/TileMapWaterMesh"
  ],
  "LabyrinthOfLore/Rendering/TileMapMeshPillarTexturer": [
    "LabyrinthOfLore/Rendering/TileMapMesh",
    "LabyrinthOfLore/Rendering/TileMapWaterMesh"
  ],
  "LabyrinthOfLore/Rendering/TileTypeDictionary": [
    "LabyrinthOfLore/Rendering/TileMapMesh",
    "LabyrinthOfLore/Rendering/TileMapWaterMesh",
    "LabyrinthOfLore/WorldMap/PixelRenderer",
    "LabyrinthOfLoreGame/Classic"
  ],
  "ALLEGRO_VERTEX": [
    "LabyrinthOfLore/Rendering/TileMapMesh",
    "LabyrinthOfLore/Rendering/TileMapMesh",
    "LabyrinthOfLore/Rendering/TileMapMeshCubeBuilder",
    "LabyrinthOfLore/Rendering/TileMapMeshCubeBuilder",
    "LabyrinthOfLore/Rendering/TileMapMeshCubeTexturer",
    "LabyrinthOfLore/Rendering/TileMapMeshPillarBuilder",
    "LabyrinthOfLore/Rendering/TileMapMeshPillarBuilder",
    "LabyrinthOfLore/Rendering/TileMapMeshPillarTexturer",
    "LabyrinthOfLore/Rendering/TileMapWaterMesh",
    "LabyrinthOfLore/Rendering/TileMapWaterMesh"
  ],
  "AllegroFlare/Random": [
    "LabyrinthOfLore/Rendering/TileMapMesh",
    "LabyrinthOfLore/Rendering/TileMapMeshCubeBuilder",
    "LabyrinthOfLore/Rendering/TileMapMeshPillarBuilder",
    "LabyrinthOfLore/Rendering/TileMapWaterMesh"
  ],
  "AllegroFlare/build_vertex": [
    "LabyrinthOfLore/Rendering/TileMapMesh",
    "LabyrinthOfLore/Rendering/TileMapMeshCubeBuilder",
    "LabyrinthOfLore/Rendering/TileMapMeshPillarBuilder",
    "LabyrinthOfLore/Rendering/TileMapWaterMesh"
  ],
  "std/cout": [
    "LabyrinthOfLore/Rendering/TileMapMesh",
    "LabyrinthOfLore/Rendering/TileMapWaterMesh"
  ],
  "LabyrinthOfLore/WorldMap/tile_type_t": [
    "LabyrinthOfLore/Rendering/TileMapMesh",
    "LabyrinthOfLore/Rendering/TileMapWaterMesh",
    "LabyrinthOfLore/WorldMap/MultiBitmapTileMapLoader"
  ],
  "AllegroFlare/basically_equal": [
    "LabyrinthOfLore/Rendering/TileMapMeshPillarBuilder"
  ],
  "fmod": [
    "LabyrinthOfLore/Rendering/TileMapMeshPillarTexturer"
  ],
  "LabyrinthOfLore/Rendering/TileTypeDefinition": [
    "LabyrinthOfLore/Rendering/TileTypeDictionary",
    "LabyrinthOfLore/Rendering/TileTypeDictionary"
  ],
  "AllegroFlare/Shaders/Base": [
    "LabyrinthOfLore/Shader/Base"
  ],
  "LabyrinthOfLore/Shader/Base": [
    "LabyrinthOfLore/Shader/ClampedColor",
    "LabyrinthOfLore/Shader/DepthDarken",
    "LabyrinthOfLore/Shader/FlatColor"
  ],
  "LabyrinthOfLore/WorldMap/Level": [
    "LabyrinthOfLore/World",
    "LabyrinthOfLoreGame/Classic"
  ],
  "AllegroFlare/color/color": [
    "LabyrinthOfLore/WorldMap/BasicRenderer",
    "LabyrinthOfLore/WorldMap/PixelRenderer"
  ],
  "LabyrinthOfLore/WorldMap/Tile": [
    "LabyrinthOfLore/WorldMap/BasicRenderer",
    "LabyrinthOfLore/WorldMap/BitmapFilenameToWorldBuilder",
    "LabyrinthOfLore/WorldMap/MultiBitmapFilenameToWorldBuilder",
    "LabyrinthOfLore/WorldMap/PixelRenderer",
    "LabyrinthOfLore/WorldMap/TileMapLoader"
  ],
  "al_init_primitives_addon": [
    "LabyrinthOfLore/WorldMap/BasicRenderer",
    "LabyrinthOfLore/WorldMap/PixelRenderer"
  ],
  "LabyrinthOfLore/WorldMap/BitmapTileMapLoader": [
    "LabyrinthOfLore/WorldMap/BitmapFilenameToWorldBuilder",
    "LabyrinthOfLore/WorldMap/BitmapFilenameToWorldBuilder",
    "LabyrinthOfLore/WorldMap/MultiBitmapFilenameToWorldBuilder"
  ],
  "al_load_bitmap": [
    "LabyrinthOfLore/WorldMap/BitmapFilenameToWorldBuilder",
    "LabyrinthOfLore/WorldMap/MultiBitmapFilenameToWorldBuilder"
  ],
  "LabyrinthOfLore/WorldMap/MultiBitmapTileMapLoader": [
    "LabyrinthOfLore/WorldMap/MultiBitmapFilenameToWorldBuilder"
  ],
  "LabyrinthOfLore/WorldMap/MultiBitmapFilenameToWorldBuilder": [
    "LabyrinthOfLoreGame/Classic"
  ],
  "LabyrinthOfLoreGame/LevelIdentifiers": [
    "LabyrinthOfLoreGame/Classic"
  ],
  "LabyrinthOfLore/WorldMap/TileTypeEnum": [
    "LabyrinthOfLoreGame/Classic"
  ],
  "LabyrinthOfLoreGame/ItemIdEnums": [
    "LabyrinthOfLoreGame/Classic",
    "LabyrinthOfLoreGame/Interactions"
  ],
  "LabyrinthOfLore/WorldMap/Door": [
    "LabyrinthOfLoreGame/Classic"
  ],
  "LabyrinthOfLoreGame/ThingDefinitionFactory": [
    "LabyrinthOfLoreGame/Interactions"
  ]
}
</pre>
</body>